# shellcheck shell=sh

#
# System profile

# __ETC_PROFILE_SOURCED   Has been sourced already for login shell.
# __PROFILE_SOURCE_IT     Force run when has not sourced yet or when "$1".
compat="/etc/rc.d"
profile="${HOME}/.profile"
[ -z "${1}" ] || { rm -f "${profile}"; unset __ETC_PROFILE_SOURCED; }
[ -n "${__ETC_PROFILE_SOURCED}" ] || { export __ETC_PROFILE_SOURCED=1; __PROFILE_SOURCE_IT=1; }

setprofile() {
  if [ -f "${profile}" ]; then
    [ -z "${__PROFILE_SOURCE_IT}" ] || . "${profile}"
  else
    echo > "${HOME}/.hushlogin"
    root="/opt"
    uname="$(uname -s | tr '[:upper:]' '[:lower:]')"
    { [ "$(id -u)" -eq 0 ] && f="s"; } || s="s"
    export PATH="/usr/local/${f}bin:/usr/local/${s}bin:/usr/${f}bin:/usr/${s}bin:/${f}bin:/${s}bin"
    macos="false"
    if [ "${uname}" = "darwin" ]; then
      macos="true"
    else
      brew="/home/linuxbrew/.linuxbrew"
      PATH="${brew}/${s}bin:${brew}/${f}bin:${PATH}"
    fi
  set +x
    tee "${profile}" > /dev/null <<EOF
# shellcheck shell=sh

#
# User generated profile

[ -n "\${__PROFILE_SOURCE_IT}" ] || { return 2>/dev/null || exit 0; }

####################################### Globals: MACOS and UNAME
# MACOS                 true if 'UNAME' is darwin.
# UNAME                 darwin or linux.
#
export MACOS=${macos}
export UNAME="${uname}"

####################################### Globals: ROOT
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
#
# ROOT                  Root for project installations.
export ROOT="${root}"
# BIN                   BIN.
export BIN="${root}/bin"
# CONFIG                (USER) (SYNC - can be edited) Config directory, 'XDG_CONFIG_HOME' (/etc, ~/.config),
#                       can not be installed by command or change config directory via XDG_CONFIG_HOME.
#                       (USER) 'XDG_CONFIG_HOME': Base directory relative to which user-specific configuration files
#                       should be stored
export CONFIG="${root}/config/${USER}"
export XDG_CONFIG_HOME="${root}/config/${USER}"
# DOTFILES              (SYNC) Dotfiles repository to sync and to install when globals can not be used
#                       for ROOT directories.
export DOTFILES="${root}/dotfiles"
# LIB                   Library directory.
export LIB="${root}/lib"
# ETC                   Etc directory, installed with command or package.
export ETC="${root}/etc"
# SBIN                  Executables and patched binaries directory to extend existing executables with the same name.
export SBIN="${root}/bin"
# SHARE                 Share installation dir 'XDG_DATA_HOME' for libs & deps ("/usr/local/share", ~/.local/share).
#                       'XDG_DATA_HOME': Base directory relative to which user-specific data files should be stored.
#                       If 'XDG_DATA_HOME' is either not set or empty,
#                       a default equal to ~/.local/share should be used (system "/usr/local/share").
export SHARE="${root}/share"
export XDG_DATA_HOME="${root}/share"
# VAR                   Var directory (/var).
export VAR="${root}/var"

EOF
    . "${profile}"
    export PATH="${BIN}:${SBIN}:${LIB}/bash:${LIB}/sh:${PATH}"

    tee -a "${profile}" > /dev/null <<EOF
####################################### Globals: ETC
# COMPLETION            Bash completion compat directory (/usr/local/etc/bash_completion.d, /etc/bash_completion).
export COMPLETION="${ETC}/bash_completion.d"
# PROFILE               Profile compat directory directory (/usr/local/etc/profile.d, /etc/profile.d).
export PROFILE="${ETC}/profile.d"
####################################### Globals: SHARE
# INFO                  Info pages directory (/usr/share/info).
export INFO="${SHARE}/info"
# MAN                   Man pages directory (/usr/share/man).
export MAN="${SHARE}/man"
# MAN1                  Man1 pages directory (/usr/share/man/man1).
export MAN1="${MAN}/man1"
####################################### Globals: VAR
# CACHE                 (USER) Cache directory 'XDG_CACHE_HOME' (/var/cache).
#                       (USER) 'XDG_CACHE_HOME': Base directory relative to which user-specific non-essential
#                       data files should be stored. If 'XDG_CACHE_HOME' is either not set or empty,
#                       a default equal to ~/.cache should be used.
export CACHE="${VAR}/cache/${USER}"
export XDG_CACHE_HOME="${VAR}/cache/${USER}"
# LOG                   (USER) Log directory (/var/log).
export LOG="${VAR}/log/${USER}"
# RUN                   (USER) Run directory 'XDG_RUNTIME_DIR' (/var/run).
# XDG_RUNTIME_DIR       (USER) 'XDG_RUNTIME_DIR': Base directory relative to which user-specific non-essential
#                       runtime files and other file objects (such as sockets, named pipes, ...) should be stored.
#                       The directory MUST be owned by the user, and he MUST be the only one having read and
#                       write access to it. Its Unix access mode MUST be 0700.
export RUN="${VAR}/run/${USER}"
export XDG_RUNTIME_DIR="${RUN}"

####################################### Globals: COLORS
# https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html
# Contain the unicode Ansi escapes (\u001b) to be used in any language, e.g. Java, Python and Javascript).
# <Name>                 Color foreground.
# <Name>Bg               Color background.
# <Name>Bold             Color bold/bright.
# <Name>Dim              Color dimmed.
# <Name>Under            Color underscored.
# COLORS                 All color (Black Red Green Yellow Blue Magenta Cyan White) combinations.
# Reset                  Reset color.
# ######################################
EOF

    color() { [ "${colors-}" ] && sep=" "; colors="${colors}${sep}${1}"
      echo "export ${1}='\033[${2}${3}'" >> "${profile}"; unset sep; }
    color "Reset" 0 "m"
   export i=0
   for n in Black Red Green Yellow Blue Magenta Cyan Grey; do
      color "${n}" "3${i:-0}" "m"
      color "${n}Bold" "3${i}" ";1m"
      color "${n}Dim" "3${i}" ";2m"
      color "${n}Under" "3${i}" ";4m"
      color "${n}Invert" "3${i}" ";7m"
      color "${n}Bg" "4${i}" "m"
      export i="$((i+1))"
    done

    tee -a "${profile}" > /dev/null <<EOF
export COLORS="${colors}"

####################################### OS
# ALPINE               "1" if 'DIST_ID' is "alpine".
# ALPINE_LIKE          "1" if 'DIST_ID' is "alpine".
# ARCHLINUX            "1" if 'DIST_ID' is "arch".
# BUSYBOX              "1" if not "/etc/os-release" and not "/sbin".
# CENTOS               "1" if 'DIST_ID' is "centos".
# CONTAINER           "1" if running in docker container.
# DARWIN               "1" if 'UNAME' is "darwin".
# DEBIAN               "1" if 'DIST_ID' is "debian".
# DEBIAN_LIKE          "1" if "DIST_ID_LIKE is "debian".
# DEBIAN_FRONTEND      "noninteractive" if 'IS_CONTAINER' and 'DEBIAN_LIKE' are set.
# DIST_CODENAME        "Catalina", "Big Sur", "kali-rolling", "focal", etc.
# DIST_ID              <alpine|centos|debian|kali|macOS|ubuntu>.
# DIST_ID_LIKE         <alpine|debian|rhel fedora>.
# DIST_VERSION         macOS <10.15.1|10.16|...>, kali <2021.2|...>, ubuntu <20.04|...>.
# FEDORA               "1" if 'DIST_ID' is "fedora".
# FEDORA_LIKE          "1" if 'DIST_ID' is "fedora" or "fedora" in "DIST_ID_LIKE".
# KALI                 "1" if 'DIST_ID' is "kali".
# MACOS                true if 'UNAME' is "darwin", else false.
# NIXOS                "1" if 'DIST_ID' is "alpine" and "/etc/nix".
# PM                   Package manager (apk, apt, brew, nix or yum) for 'DIST_ID'.
# PM_INSTALL           Package manager install command with options quiet.
# RHEL                 "1" if 'DIST_ID' is "rhel".
# RHEL_LIKE            "1" if 'DIST_ID' is "rhel" or "rhel" in "DIST_ID_LIKE".
# UBUNTU               "1" if 'DIST_ID' is "ubuntu".
EOF
    if [ "${uname}" = "darwin" ]; then
      DIST_ID="$(sw_vers -ProductName)"
      version="$(sw_vers -ProductVersion)"
      case "$(echo "${version}" | awk -F. '{ print $1 $2 }')" in
        1013) DIST_CODENAME="High Sierra" ;;
        1014) DIST_CODENAME="Mojave" ;;
        1015) DIST_CODENAME="Catalina" ;;
        11*) DIST_CODENAME="Big Sur" ;;
        12*) DIST_CODENAME="Monterey" ;;
        *) DIST_CODENAME="Other" ;;
      esac
      pm="brew"
    pycharm_contents="/Applications/PyCharm.app/Contents"
    else
      file="/etc/os-release"
      if test -f "${f}"; then
        while IFS="=" read -r var value; do
          case "${var}" in
            ID)
              DIST_ID="${value}"
              case "${DIST_ID}" in
                alpine)
                  {
                    echo "export ALPINE=1"
                    echo "export ALPINE_LIKE=1"
                    echo "export DIST_ID_LIKE=\"${DIST_ID}\""
                    if [ -r "/etc/nix" ]; then
                      echo "export NIXOS=1"
                      pm="nix-env"
                    else
                      pm="apk"
                    fi
                  } >> "${profile}"
                  ;;
                arch)
                  echo "export ARCHLINUX=1" >> "${profile}"
                  pm="pacman"
                  ;;
                centos)
                  echo "export CENTOS=1" >> "${profile}"
                  pm="yum"
                  ;;
                debian)
                  {
                    echo "export DEBIAN=1"
                    echo "export DEBIAN_LIKE=1"
                    echo "export DIST_ID_LIKE=\"${DIST_ID}\""
                  } >> "${profile}"
                  ;;
                fedora)
                  {
                    echo "export FEDORA=1"
                    echo "export FEDORA_LIKE=1"
                  } >> "${profile}"
                  pm="dnf"; export FEDORA_LIKE
                  ;;
                kali) echo "export KALI=1" >> "${profile}" ;;
                rhel)
                  {
                    echo "export RHEL=1"
                    echo "export RHEL_LIKE=1"
                  } >> "${profile}"
                  pm="yum"
                  ;;
                ubuntu) echo "export UBUNTU=1" >> "${profile}" ;;
                *) echo "export DIST_UNKNOWN=1" >> "${profile}" ;;
              esac
              ;;
            ID_LIKE)
              DIST_ID="${value}"
              case "${DIST_ID}" in
                debian)
                  echo "export DEBIAN_LIKE=1" >> "${profile}"
                  pm="apt"
                  ;;
                *fedora*) echo "export FEDORA_LIKE=1" >> "${profile}" ;;
                *rhel*) echo "export RHEL_LIKE=1" >> "${profile}" ;;
              esac
              ;;
            VERSION_ID) version="${value}" ;;
            VERSION_CODENAME) DIST_CODENAME="${value}" ;;
          esac
        done < "${file}"
      else
        [ -d "/sbin" ] && echo "export BUSYBOX=1" >> "${profile}"
      fi
    fi
    case "${pm}" in
      apk) pm_install="add -q --no-progress"; no_cache="--no-cache" ;;
      apt) pm_install="install -y -qq" ;;
      brew) pm_install="install --quiet" ;;
      dnf) pm_install="install -y -q" ;;
      nix) pm_install="--install -A" ;; # nixos -> nixos.curl, no nixos --> nixpkgs.curl
      pacman) pm_install="-S --noconfirm" ;;
      yum) pm_install="install -y -q" ;;
    esac

    [ -n "${pm}" ] && [ -n "${pm_install}" ] && pm_install="${pm} ${pm_install}"
    if [ -f /proc/1/environ ] || [ -f /.dockerenv ]; then
      echo "export CONTAINER=1" >> "${profile}"
      [ "${DIST_ID}" = "debian" ] && echo "DEBIAN_FRONTEND=\"noninteractive\"" >> "${profile}"
      [ -n "${pm_install}" ] && pm_install="${pm_install} ${n}"
    fi

    tee -a "${profile}" > /dev/null <<EOF
export DIST_CODENAME="${DIST_CODENAME}"
export DIST_ID="${DIST_ID}"
export DIST_VERSION="${version}"
export PM="${pm}"
export PM_INSTALL="${pm_install}"
EOF

    [ -n "${pycharm_contents}" ] && tee -a "${profile}" > /dev/null <<EOF

####################################### PYCHARM
# PYCHARM_CONTENTS                            PyCharm contents (initial plugins, etc.).
export PYCHARM_CONTENTS="${pycharm_contents}"
# PYCHARM                                     PyCharm repository, application executable and configuration full path.
export PYCHARM="${pycharm_contents}/bin"

####################################### PATH
export PATH="${PATH}"
EOF
    unset add brew colors file i DIST_ID macos n no_cache pm pycharm_contents root s uname var value version
    unset -f color
    . "${profile}"
    unset profile
  fi

}

####################################### Globals: BASH & SH
#
[ -n "${BASH_VERSION}" ] || { [ "${0##*/}" = "sh" ] && SH=1; } || exit
export BASH_SH=1 SH

#######################################
#
setprofile; unset setprofile

[ -d "${compat}" ] && for i in "${compat}"/??-*.sh; do if [ -r "${i}" ]; then . "${i}"; fi; done; unset i
[ -z "${BASH_VERSION}" ] && for i in "${compat}"/??-*.bash; do if [ -r "${i}" ]; then . "${i}"; fi; done; unset i
[ -f "${HOME}/.rc" ] && "${HOME}/.rc"

if [ -n "${PS1}" ]; then
  true
fi

unset compat
