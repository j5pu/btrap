#!/usr/bin/env bash
# shellcheck disable=SC1091
set -eo pipefail
shopt -s inherit_errexit

# IMAGES: enable;<repo owner>;<repo name>;<tag>;stripname;striptag
#
FIELDS="6"
IMAGES=$(cat <<EOF
1;alpine;;;;
1;archlinux;;;;
1;bash;;;;
0;bash;;5.1;;
0;bash;;5.0;;
0;bash;;4.4;;
1;bats;bats;;;
1;busybox;;;;
1;centos;;;;
1;debian;;;;
1;debian;;bullseye-backports;;bullseye-
1;debian;;bullseye-slim;;bullseye-
1;fedora;;;;
1;jrei;systemd-ubuntu;;;
1;kalilinux;kali-rolling;;-rolling;
1;kalilinux;kali-bleeding-edge;;-bleeding;
1;nixos;nix;;;
0;python;;3.9-alpine;;-alpine
0;python;;3.9-bullseye;;
0;python;;3.9-slim;;
1;python;;3.10-alpine;;-alpine
1;python;;3.10-bullseye;;
1;python;;3.10-slim;;
1;richxsl;rhel7;;;
1;ubuntu;;;;
1;zshusers;zsh;;;
EOF
)

#######################################
# Docker hub build hook
# https://docs.docker.com/docker-hub/builds/advanced/
# https://dev.to/samuelea/automate-your-builds-on-docker-hub-by-writing-a-build-hook-script-13fp
# https://codeclimbing.com/automate-your-builds-on-docker-hub-by-writing-a-build-hook-script/
# on macOS builds for linux/amd64 (OS, ARCH). Igual hay ue compilar para ms pero el mac no puede
# Globals (Docker Hub):
#   COMMIT_MSG         Message from the commit being tested and built.
#   DOCKER_REPO        Name of the Docker repository being built (index.docker.io/<repo owner>/<repo name>)
#   DOCKER_TAG         Docker repository tag being built.
#   DOCKERFILE_PATH    Dockerfile currently being built.
#   IMAGE_NAME         Name and tag of the Docker repository being built.
#                      This variable is a combination of DOCKER_REPO:DOCKER_TAG.
#   SOURCE_BRANCH      Name of the branch or the tag that is currently being tested.
#   SOURCE_COMMIT      SHA1 hash of the commit being tested.
# Globals:
#   HUB               Running in auto build Docker Hub.
#######################################
build::build() {
  if $HUB; then
    curl --help
  else
    :
  fi
}

#######################################
# Shows images and containers variables in fields
# Globals:
#   GIT           GitHub and Docker Hub repository owner.
#   IMAGES        <repo owner>|<repo name>|<tag>
#   FIELDS        Fields in 'IMAGES' global.
#   REPOSITORY    [Internal]: repository name (default: rc).
#                 - Format: <repository name>
#                 - Examples: base, rc
# Locals:
#   enable       '1' if enable, enable field of 'IMAGES'.
#   name          [Base]: image repository name, <repo name> field of 'IMAGES' (default: <repo owner>).
#                 - Format: <repo name>
#                 - Examples: alpine, systemd-ubuntu.
#   owner         [Base]: image repository owner, <repo owner> field of 'IMAGES'.
#                 - Format: <repo name>
#                 - Examples: alpine, systemd-ubuntu.
#   short         [Base]: image shortened tag.
#                 - Format: <tag> (-alpine removed)
#                 - Examples: 3.9
#   stripname     strip from <repo name>, stripname field of 'IMAGES'.
#   striptag      strip from <tag>, striptag field of 'IMAGES'.
# Outputs:
#   id            [Internal] tag (default: alpine)
#                 - Format: 1) <name>-<short>
#                           2) <name> (if tag is latest)
#                           3) <name><short> (for images with 'short' starting with numbers)
#                 - Examples: alpine, systemd-ubuntu, python3.9, bash5.1
#   build         [Internal]: image, default triggers auto build in Docker Hub (default: GIT/rc:alpine).
#                 - Format: <GIT>/<repository>:<id>
#                 - Examples: <GIT>/base:alpine, <GIT>/base:systemd-ubuntu, <GIT>/rc:python3.9
#   container     [Internal]: container name.
#                 - Format: <repository>@<id>
#                 - Examples: base@alpine, rc@systemd-ubuntu, base@python3.9, rc@bash5.1
#   repo          [Base]: image repository, similar to 'DOCKER_REPO' global, $1 of 'images' variable.
#                 - Format: index.docker.io/<repo owner>/<repo name>.
#                 - Examples: alpine, jrei/systemd-ubuntu.
#   tag           [Base]: image tag, similar to 'DOCKER_TAG', <tag> field of 'IMAGES'(default: latest).
#                 - Format: <tag>
#                 - Examples: latest, 3.9-alpine.
#######################################
build::vars() {
  local enable owner name tag stripname striptag
  local id build container repo tag
  local git line sep short suffix

  echo "${IMAGES}" | while read -r line; do
    [ "$(echo "${line}" | awk -F ';' '{ print NF-1 }')" -eq "$(( FIELDS-1 ))" ] \
      || die Incorrect number of fields for: "${line}"
  done

  while IFS=";" read -r enable owner name tag stripname striptag; do
    [ "${enable}" -ne "1" ] && continue
    sep="-"
    suffix=""
    : "${tag:=latest}"
    repo="${owner}${name:+/${name}}"
    short="${tag/${striptag}/}"
    [ "${short-}" ] && [ "${short:0:1}" -eq "${short:0:1}" ] 2>/dev/null && sep=""
    [ "${short}" = "latest" ] || suffix="${sep}${short}"
    name="${name/${stripname}/}"
    id="${name:-${owner}}${suffix}"
    { [ "${TEST-}" ] || $BASE; } || git="${GIT}/"
    build="${git}${TEST}${REPOSITORY}:${id}"
    container="${TEST}${REPOSITORY}.${id}"
    echo "${id} ${build} ${container} ${repo} ${tag}"
  done <<< "${IMAGES}"
}


#######################################
# Main function
# Globals:
#   BASE              Base images (never get pushed).
#   CACHE             build --no-cache
#   DOCKERFILE_PATH   Dockerfile currently being built.
#   HUB               Running in auto build Docker Hub.
#   ID                ID to build, create, exec or run command (default: all).
#   REPOSITORY        rc.
#   TEST              Build test images for rc (never get pushed).
#######################################
build::main() {
  local arg args=() finish=false ids
  export BASE=false CACHE DOCKERFILE_PATH GIT=j5pu HUB=true REPOSITORY="rc"
  export TEST
  if [ "${DOCKERFILE_PATH-}" ]; then
    build::build
  else
    cd "$(dirname "${0}")/.." || exit 1
    command -v ok >/dev/null || source ./profile.d/00.sh
    DOCKERFILE_PATH="./Dockerfile"
    HUB=false
    ids="$(build::id)"
    [ ! "${1-}" ] && build::usage && exit
    for arg; do
      if $finish; then
        args+=("${arg}")
        continue
      fi
      case "${arg}" in
        --base) BASE=true ;;
        --test) CACHE="--no-cache"; TEST="test-" ;;
      esac
    done
  fi
}
