#!/usr/bin/env bash
# shellcheck disable=SC1091
set -e

# IMAGES: <repo owner>|<repo name>|<tag>
IMAGES=$(cat <<EOF
alpine||
archlinux||
bash||
bash||5.1
bash||5.0
bash||4.4
bats|bats|
busybox||
centos||
debian||
debian||bullseye-backports
debian||bullseye-slim
fedora||
jrei|systemd-ubuntu|
kalilinux|kali-rolling|
kalilinux|kali-bleeding-edge|
nixos|nix|
python||3.9-alpine
python||3.9-bullseye
python||3.9-slim
python||3.10-alpine
python||3.10-bullseye
python||3.10-slim
richxsl|rhel7|
ubuntu||
zshusers|zsh|
EOF
)

#declare -A targets=( \
#["bash"]="bash debian kalilinux ubuntu" \
#["bin_bash"]="centos fedora richxsl" \
#["sh"]="alpine busybox nix" \
#["usr_bin_bash"]="archlinux" \
#)

#######################################
# Docker hub build hook
# https://docs.docker.com/docker-hub/builds/advanced/
# https://dev.to/samuelea/automate-your-builds-on-docker-hub-by-writing-a-build-hook-script-13fp
# https://codeclimbing.com/automate-your-builds-on-docker-hub-by-writing-a-build-hook-script/
# on macOS builds for linux/amd64 (OS, ARCH). Igual hay ue compilar para ms pero el mac no puede
# Globals (Docker Hub):
#   COMMIT_MSG         Message from the commit being tested and built.
#   DOCKER_REPO        Name of the Docker repository being built (index.docker.io/<repo owner>/<repo name>)
#   DOCKER_TAG         Docker repository tag being built.
#   DOCKERFILE_PATH    Dockerfile currently being built.
#   IMAGE_NAME         Name and tag of the Docker repository being built.
#                      This variable is a combination of DOCKER_REPO:DOCKER_TAG.
#   SOURCE_BRANCH      Name of the branch or the tag that is currently being tested.
#   SOURCE_COMMIT      SHA1 hash of the commit being tested.
# Globals:
#   HUB               Running in auto build Docker Hub.
#   ID                ID to build, create, exec or run command (default: all).
#   PUSH              Push after build.
#   REPOSITORIES      [Internal]: repositories names.
#   REPOSITORY        [Internal]: repository name (default: rc).
#                     - Format: <repository name>
#                     - Examples: base, rc
#######################################
build::build() {
  local id build container repo tag
  $HUB || REPOSITORIES=("${REPOSITORY}")
  for REPOSITORY in "${REPOSITORIES[@]}"; do
    while read -r id build container repo tag; do
      [ "${ID-}" ] && [ "${ID}" != "${id}" ] && continue
      docker build --build-arg repo --build-arg tag --file "${DOCKERFILE_PATH}" --target "${REPOSITORY}" \
        --tag "${build}" .
    done < <(build::vars)
    if $HUB || $PUSH; then docker push --all-tags "${GIT}/${REPOSITORY}"; fi
  done
}

build::build::test::quiet::die() {
  if $TEST || $FORCE; then
    ID="${1}"
    docker rmi "${2}" >/dev/null
    if build::build &>"/tmp/build-${ID}.out"; then
      if $SHOW; then completed "Build: ${2}"; fi
    else
      die 1 "$(cat "/tmp/build-${ID}.out")"
    fi
  elif $SHOW; then
    completed "${2}"
  fi
}

build::clean() {
  local i
  docker container prune --force &>/dev/null
  # shellcheck disable=SC2046
  for i in $(comm -23 <(docker ps -aq | sort) <(docker ps -q -f status=running | sort)); do \
    docker rm --volumes "${i}"; done
  docker image prune --all --force &>/dev/null
  docker volume prune --force &>/dev/null
  docker network prune --force &>/dev/null
  docker system prune --all --volumes --force &>/dev/null
  docker system df
}

#######################################
# Create a container with default name if it does not exists.
# Globals:
#   ID                ID to build, create, exec or run command (default: all).
#   REPOSITORY        [Internal]: repository name (default: rc).
#                     - Format: <repository name>
#                     - Examples: base, rc
#######################################
build::create() {
  local image
  local id build container repo tag
  if [ "${ID-}" ]; then
    image="$(build::image "${ID}")"
    container="$(build::vars | grep "^${ID} " | awk '{ print $3 }')"
    build::create::force "${ID}" "${image}" "${container}"
  else
    while read -r id build container repo tag; do
      build::create::force "${id}" "${build}" "${container}"
    done < <(build::vars)
  fi
}

build::create::force() {
  local container create=true
  build::build::test::quiet::die "${1}" "${2}"
  if docker container inspect "${3}" >/dev/null 2>&1; then
    container="$(docker ps -q -f status=running -f name="${3}")"
    if [ "${container-}" ] && ! $TEST && ! $FORCE; then create=false; fi
  fi
  if $create; then
    docker rm "${3}" &>/dev/null || true
    docker create --name "${3}" "${2}" 1>/dev/null
    completed "${3}"
  fi
}

#######################################
# Exec command in an ephemeral container.
# Globals:
#   ID                ID to build, create, exec or run command (default: all).
#   SHOW              Show image id for exec and run.
#   TEST              Build local images if repository is not base witouth 'GIT' and test- prefix.
#######################################
build::exec() {
  local i image
  export ARGUMENTS=("${@}")
  if [ "${ID-}" ]; then
    image="$(build::image "${ID}")"
    [ "${SHOW-}" ] && completed "${image}"
    build::exec::rm "${ID}" "${image}"
  else
    for i in $(build::id); do
      image="$(build::image "${i}")"
      [ "${SHOW-}" ] && completed "${image}"
      build::exec::rm "${i}" "${image}"
    done
  fi
}

build::exec::rm() {
  local name="exec-${1}"
  if $TEST; then name="test-${name}"; fi
  docker stop "${name}" &>/dev/null || true
  docker rm "${name}" &>/dev/null || true
  build::build::test::quiet::die "${1}" "${2}"
  if docker run -dit --name "${name}" "${2}" >/dev/null \
    && docker exec -it "${name}" "${ARGUMENTS[@]}"; then
    if $TEST; then docker rmi "${2}" >/dev/null; fi
    docker stop "${name}" &>/dev/null || true
    docker rm "${name}" &>/dev/null || true
  fi
}

#######################################
# Shows ids.
#######################################
build::id() { build::vars | awk '{ print $1 }'; }

#######################################
# Shows image for id.
#######################################
build::image() { build::vars | grep "^${1:-alpine} " | awk '{ print $2 }'; }

#######################################
# Runs command in an ephemeral container.
# Globals:
#   EXCLUDE           Excluded IDs when doing 'docker run' for all (not shell CMD/ENTRYPOINT).
#   ID                ID to build, create, exec or run command (default: all).
#   SHOW              Show image id for exec and run.
#   TEST              Build local images if repository is not base witouth 'GIT' and test- prefix.
#######################################
build::run() {
  local i image
  if [ "${ID-}" ]; then
    image="$(build::image "${ID}")"
    build::build::test::quiet::die "${ID}" "${image}"
    docker run -it --rm "${image}" "${@}"
    if $TEST; then docker rmi "${image}" >/dev/null; fi
  else
    for i in $(build::id); do
      [[ "${i}" =~ ${EXCLUDE} ]] && continue
      image="$(build::image "${i}")"
      build::build::test::quiet::die "${ID}" "${image}"
      docker run -it --rm "${image}" "${@}"
      $TEST && docker rmi "${image}" >/dev/null
    done
  fi
}


#######################################
# Shows images and containers variables in fields
# Globals:
#   GIT           GitHub and Docker Hub repository owner.
#   IMAGES        <repo owner>|<repo name>|<tag>
#   REPOSITORY    [Internal]: repository name (default: rc).
#                 - Format: <repository name>
#                 - Examples: base, rc
# Locals:
#   name          [Base]: image repository name, <repo name> field of 'IMAGES' (default: <repo owner>).
#                 - Format: <repo name>
#                 - Examples: alpine, systemd-ubuntu.
#   owner         [Base]: image repository owner, <repo owner> field of 'IMAGES'.
#                 - Format: <repo name>
#                 - Examples: alpine, systemd-ubuntu.
#   short         [Base]: image shortened tag.
#                 - Format: <tag> (-alpine removed)
#                 - Examples: 3.9
# Outputs:
#   id            [Internal] tag (default: alpine)
#                 - Format: 1) <name>-<short>
#                           2) <name> (if tag is latest)
#                           3) <name><short> (for images with 'short' starting with numbers)
#                 - Examples: alpine, systemd-ubuntu, python3.9, bash5.1
#   build         [Internal]: image, default triggers auto build in Docker Hub (default: GIT/rc:alpine).
#                 - Format: <GIT>/<repository>:<id>
#                 - Examples: <GIT>/base:alpine, <GIT>/base:systemd-ubuntu, <GIT>/rc:python3.9
#   container     [Internal]: container name.
#                 - Format: <repository>@<id>
#                 - Examples: base@alpine, rc@systemd-ubuntu, base@python3.9, rc@bash5.1
#   repo          [Base]: image repository, similar to 'DOCKER_REPO' global, $1 of 'images' variable.
#                 - Format: index.docker.io/<repo owner>/<repo name>.
#                 - Examples: alpine, jrei/systemd-ubuntu.
#   tag           [Base]: image tag, similar to 'DOCKER_TAG', <tag> field of 'IMAGES'(default: latest).
#                 - Format: <tag>
#                 - Examples: latest, 3.9-alpine.
#######################################
build::vars() {
  local name owner short
  local id build container repo tag
  local add prefix="${GIT}/" sep suffix

  while IFS="|" read -r owner name tag; do
    sep="-"
    suffix=""
    : "${tag:=latest}"
    repo="${owner}${name:+/${name}}"
    short="${tag/-alpine/}"
    [ "${short-}" ] && [ "${short:0:1}" -eq "${short:0:1}" ] 2>/dev/null && sep=""
    [ "${short}" = "latest" ] || suffix="${sep}${short}"
    id="${name:-${owner}}${suffix}"
    if $TEST; then prefix="test-"; add="${prefix}"; fi
    build="${prefix}${REPOSITORY}:${id}"
    container="${add}${REPOSITORY}.${id}"
    echo "${id} ${build} ${container} ${repo} ${tag}"
  done <<< "${IMAGES}"
}

build::usage() {
    echo -e "
${Yellow}Usage${Reset}:
  ${Green}./hooks/build${Reset} [build|clean|create|exec|id|image|run|vars] [base|rc] [push] [id, ...] \
[--show] [--test] ...

${Yellow}Description${Reset}:
  ${Green}Run${Reset} for all, excludes images with ENTRYPOINT/CMD not shell/bash, i.e: bats, python.

  ${Green}Exec${Reset} is executed for all images.

  ${Green}Create${Reset} does not remove existing container unless ${Magenta}--force${Reset} or \
${Magenta}--test${Reset}.

  ${Blue}Output${Reset} is ${Red}not shown${Reset} for ${Green}create${Reset}, ${Green}exec${Reset} and \
${Green}run${Reset} commands unless:
    ${Magenta}--show${Reset}, which will prepend a line with the image or build succesful if --test.
    ${Magenta}--test${Reset}, if build fails will show the build output from file and die.

  ${Blue}Development tests${Reset} (a new build/no push is run each time the script is called) can be run with:
    ${Magenta}--test${Reset}, and check the output or error code.

  ${Blue}Portability tests${Reset} can be run for all images using:
    ${Magenta}--show${Reset}, to see what image is producing which output.

${Yellow}Examples${Reset}:
  $(info [Docker Hub]: build and push)
  $(info [Local]: help)
  $(completed ./hooks/build)

  $(info Build \(default: rc\))
  $(completed ./hooks/build "${Green}build${Reset}")
  $(info Build ID \(default: rc\))
  $(completed ./hooks/build "${Green}build${Reset}" alpine)
  $(info Build ID with test prefix - will never be pushed \(default: rc\))
  $(completed ./hooks/build "${Green}build${Reset}" alpine --test)
  $(info Build for 'base' repository)
  $(completed ./hooks/build "${Green}build${Reset}" base)
  $(info Build and push \(default: rc\))
  $(completed ./hooks/build "${Green}build${Reset}" push)
  $(info Build and push for 'base' repository)
  $(completed ./hooks/build "${Green}build${Reset}" push base)

  $(info Clean removes all but running containers)
  $(completed ./hooks/build "${Green}clean${Reset}")

  $(info Create \(default: rc\))
  $(completed ./hooks/build "${Green}create${Reset}")
  $(info Create with new test build \(default: rc\))
  $(completed ./hooks/build "${Green}create${Reset}" --test)
  $(info Create alpine container \(default: rc\))
  $(completed ./hooks/build "${Green}create${Reset}" alpine)
  $(info Create alpine container with new test build \(default: rc\))
  $(completed ./hooks/build "${Green}create${Reset}" alpine --test)
  $(info Create for 'base' repository)
  $(completed ./hooks/build "${Green}create${Reset}" base)
  $(info Create with new test build for 'base' repository)
  $(completed ./hooks/build "${Green}create${Reset}" base --test)

  $(info Exec command \(all\) for 'rc' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" whoami)
  $(info Exec command with new test build \(all\) for 'rc' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" --test whoami)
  $(info Exec command \(all\) and add image name to output for 'rc' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" --show whoami)
  $(info Exec command with new test build \(all\) and add image name to output for 'rc' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" --show --test whoami)
  $(info Exec command \(id\) for 'rc' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" alpine whoami)
  $(info Exec command with new test build \(id\) and add image name to output  for 'rc' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" --test alpine whoami)
  $(info Exec command \(id\) and add image name to output  for 'rc' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" --show alpine whoami)
  $(info Exec command with new test build \(id\) and add image name to output  for 'rc' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" --show --test alpine whoami)
  $(info Exec command \(all\) for 'base' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" base whoami)
  $(info Exec command \(all\) and add image name to output for 'base' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" base --show whoami)
  $(info Exec command \(id\) for 'base' repository)
  $(completed ./hooks/build "${Green}exec${Reset}" base alpine whoami)
  $(info Exec command \(id\) and add image name to output  for 'base' repository)
  $(completed ./hooks/build v base --show alpine whoami)

  $(info IDs)
  $(completed ./hooks/build "${Green}id${Reset}")

  $(info Image for 'alpine' \(default: rc\))
  $(completed ./hooks/build "${Green}image${Reset}")
  $(info Image for id \(default: rc\))
  $(completed ./hooks/build "${Green}image${Reset}" python3.9)
  $(info Image for id for 'base' repository)
  $(completed ./hooks/build "${Green}image${Reset}" base python3.9)

  $(info Build and push \(default: rc\))
  $(completed ./hooks/build "${Green}push${Reset}")
  $(info Build and push for 'base' repository)
  $(completed ./hooks/build "${Green}push${Reset}" base)

  $(info Run command \(all\) for 'rc' repository)
  $(completed ./hooks/build "${Green}run${Reset}" whoami)
  $(info Run command with new test build \(all\) for 'rc' repository)
  $(completed ./hooks/build "${Green}run${Reset}" --test whoami)
  $(info Run command \(all\) and add image name to output for 'rc' repository)
  $(completed ./hooks/build "${Green}run${Reset}" --show whoami)
  $(info Run command with new test build \(all\) and add image name to output for 'rc' repository)
  $(completed ./hooks/build "${Green}run${Reset}" --show --test whoami)
  $(info Run command \(id\) for 'rc' repository)
  $(completed ./hooks/build "${Green}run${Reset}" alpine whoami)
  $(info Run command with new test build \(id\) for 'rc' repository)
  $(completed ./hooks/build "${Green}run${Reset}" --test alpine whoami)
  $(info Run command \(id\) and add image name to output  for 'rc' repository)
  $(completed ./hooks/build "${Green}run${Reset}" --show alpine whoami)
  $(info Run command with new test build  \(id\) and add image name to output  for 'rc' repository)
  $(completed ./hooks/build "${Green}run${Reset}" --show --test alpine whoami)
  $(info Run command \(all\) for 'base' repository)
  $(completed ./hooks/build "${Green}run${Reset}" base whoami)
  $(info Run command \(all\) and add image name to output for 'base' repository)
  $(completed ./hooks/build "${Green}run${Reset}" base --show whoami)
  $(info Run command \(id\) for 'base' repository)
  $(completed ./hooks/build "${Green}run${Reset}" base alpine whoami)
  $(info Run command \(id\) and add image name to output  for 'base' repository)
  $(completed ./hooks/build "${Green}run${Reset}" base --show alpine whoami)

  $(info Variables \(default: rc\))
  $(completed ./hooks/build "${Green}vars${Reset}")
  $(info Variables for testing \(default: rc\))
  $(completed ./hooks/build "${Green}vars${Reset}" --test)
  $(info Variables for 'base' repository)
  $(completed ./hooks/build "${Green}vars${Reset}" base)
"
}

#######################################
# Main function
# Globals:
#   DOCKERFILE_PATH   Dockerfile currently being built.
#   EXCLUDE           Excluded IDs when doing 'docker run' for all (not shell CMD/ENTRYPOINT).
#   FORCE             Force creation of container, default true for --test.
#   HUB               Running in auto build Docker Hub.
#   ID                ID to build, create, exec or run command (default: all).
#   PUSH              Push after build.
#   REPOSITORIES      [Internal]: repositories names.
#   REPOSITORY        [Internal]: repository name (default: rc).
#                     - Format: <repository name>
#                     - Examples: base, rc
#   SHOW              Show image id for exec and run.
#   TEST              Build local images if repository is not base witouth 'GIT' and test- prefix.
#######################################
build::main() {
  local arg args=() func ids
  export REPOSITORIES=("rc" "base")
  export DOCKERFILE_PATH EXCLUDE="^bats|^python" GIT=j5pu HUB=true ID PUSH=false REPOSITORY="${REPOSITORIES[0]}"
  export FORCE=false SHOW=false TEST=false
  if [ "${DOCKERFILE_PATH-}" ]; then
    build::build
  else
    cd "$(dirname "${0}")/.." || exit 1
    command -v completed >/dev/null || source ./profile.d/00.sh
    DOCKERFILE_PATH="./Dockerfile"
    HUB=false
    ids="$(build::id)"
    [ ! "${1-}" ] && build::usage && exit
    for arg; do
      case "${arg}" in
        --force) FORCE=true ;;
        --show) SHOW=true ;;
        --test) TEST=true ;;
        build|clean|create|exec|id|image|run|vars)
          [ "${func-}" ] && die 1 "Two functions provided: ${arg} and ${1}"
          func="build::${arg}"
          ;;
        base|rc) REPOSITORY="${arg}" ;;
        push) PUSH=true; func="build::build";;
        *)
          if echo "${ids}" | grep -q "${arg}"; then ID="${arg}"; else args+=("${arg}"); fi ;;
      esac
    done
    if $TEST; then
      PUSH=false
      if [ "${REPOSITORY}" = "base" ]; then TEST=false; fi
    fi
    [ "${func-}" ] && ${func} "${args[@]}"
  fi
}

build::main "${@}"
