#!/bin/sh

# Show colors and helper functions output, or generate color lib
#

. helpers.lib

color() {
  co=${1}${4:-}; COLORS="${COLORS:-}${5:-}${co}"
  f="$(echo "${co}" | tr '[:upper:]' '[:lower:]')"

  tee -a "${file}" > /dev/null <<EOF
# <html><h2>${1} ${4:-}</h2>
# <p><strong><code>\$${co}</code></strong> Color ${1} ${4:-}.</p>
# </html>
  export ${co}='\033[${2}${3}'

EOF

  tee -a "${file}" > /dev/null <<EOF
# <html><h2>${f} - Show arguments in ${co}</h2>
# <h3>Examples</h3>
# <dl>
# <dt>Show arguments in ${co}:</dt>
# <dd>
# <pre><code class="language-bash">${f} Show Text
# </code></pre>
# </dd>
# </dl>
# </html>
  ${f}() { test "\$#" -eq 0 || printf '%b' "\${${co}}"; printf '%b' "\$@"; printf '%b' "\${Reset}"; }

EOF
}

force() {
  tee "${file}" > /dev/null <<EOF
# shellcheck shell=sh

# Colors and color functions library (generated by: ./${repo}/${run}), to update run: ./${run} from ${repo} repository
#

if ! command -v red >/dev/null; then
EOF

  i=0; export COLORS=""
  color 'Reset' "${i}" 'm' '' ''
  for c in Black Red Green Yellow Blue Magenta Cyan Grey; do
    color "${c}" "3${i}" 'm'    ''        ' '
    color "${c}" "3${i}" ';1m'  'Bold'    ' '
    color "${c}" "3${i}" ';2m'  'Dim'     ' '
    color "${c}" "3${i}" ';4m'  'Under'   ' '
    color "${c}" "3${i}" ';7m'  'Invert'  ' '
    color "${c}" "4${i}" 'm'    'Bg'      ' '
    i="$((i+1))"
  done

  tee -a "${file}" > /dev/null <<EOF
fi

####################################### Executed: force & parse
#
if echo "\$0" | grep -q '${lib}'; then
  if test "\$#" -eq 0 || test "\${1-}" = '--force' || test "\${PARSED-}"; then
    unset PARSE PARSED
    case "\$1" in
      --force) shift; ${script} --force
    esac
  elif test "\$#" -ne 0; then
    . helpers.lib
    PARSE="\$0" parse "\$@"
  fi
fi

EOF
  chmod +x "${file}"
}

show() {
  prev_two=''
  awk -F '[= ]' '/^  export / { print $4 }' "$(dirname "${0}")/${lib}" | while read -r i; do
    first_two="$(echo "${i}" | awk '{print substr($0,0,2)}')"
    # shellcheck disable=SC2034
    [ "${first_two}" = "${prev_two}" ] || { echo; prev_two="${first_two}"; }
    printf "%b\n" "$(eval echo \$"${i}")${i}${Reset}"
  done

  echo

  export VAR1=1 VAR2=2
  DEBUG=1 debug VAR1 2>&1
  debug Debug Message: not shown "DEBUG unset" 2>&1
  DEBUG=1 debug VAR1 VAR2 2>&1
  DEBUG=1 QUIET=1 debug Not Shown: "QUIET=1" 2>&1
  DEBUG=1 debug 2>&1

  echo

  error Error Message 2>&1
  QUIET=1 error Not Shown: "QUIET=1" 2>&1
  error 2>&1

  echo

  success Success Message
  QUIET=1 success Not Shown: "QUIET=1"
  success

  echo

  VERBOSE=1 verbose Verbose Message: "VERBOSE=1"
  VERBOSE=1 QUIET=1 verbose Not Shown: "QUIET=1"
  VERBOSE=1 verbose

  echo

  WARNING=1 warning Warning Message: "WARNING=1" 2>&1
  WARNING=1 QUIET=1 warning Not shown: "QUIET=1" 2>&1
  WARNING=1 warning 2>&1

  echo

  die Die Message
}

main() {
  if test "$#" -eq 0 || test "${PARSED-}"; then
    unset PARSE PARSED
    script="$(basename "$0")"
    lib="${script}.lib"
    for arg do
      case "${arg}" in
        --force)
          top="$(git top)"
          repo="$(git name)"
          run="bin/$(basename "${0}")"
          file="${top}/bin/${lib}"
          if test "${top-}" && test "${repo-}" && echo "${0}" | grep -q "/${repo}/${run}"; then
            force
            die Color Lib Generated
          else
            die Not top: "${top:-.}", or repo: "${repo:-}" or can only be run from rc.d repository: "$0"
          fi
          exit
          ;;
      esac
    done
    show
  else
    PARSE="${0}" parse "$@"
  fi
}

main "$@"
