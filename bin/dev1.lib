#!/bin/sh

# Converts project .env with EnvFile format to .envrc (shell) and manages bats libraries (source it in .envrc).
#

# <html><h2>Project Remote Repository Name</h2>
# <p><strong><code>$PROJECT_REPO_NAME</code></strong> contains output of 'git-name'.</p>
# </html>
PROJECT_REPO_NAME="$(git name || basename "${PROJECT_DIR}")"; export PROJECT_REPO_NAME

# <html><h2>Project Top Level Path Base Name</h2>
# <p><strong><code>$PROJECT_BASENAME</code></strong> contains output of 'git-basename'.</p>
# </html>
PROJECT_BASENAME="$(git basename || echo "${PROJECT_REPO_NAME}" )"; export PROJECT_BASENAME

# <html><h2>Project Directory in Container</h2>
# <p><strong><code>$PROJECT_DIR_CONTAINER</code></strong> from $PROJECT_NAME$.</p>
# </html>
PROJECT_DIR_CONTAINER="/${PROJECT_NAME}"; export PROJECT_DIR_CONTAINER


if test -f "${PROJECT_DIR}/.env"; then
  grep -vE '^$|^#' "${PROJECT_DIR}/.env" | while IFS='=' read -r var value; do
    [ "${var}" != 'PROJECT_DIR' ] || value="${PROJECT_DIR}"
    [ "${var}" != 'PROJECT_BASENAME' ] || value="${PROJECT_BASENAME}"
    eval "export ${var}=${value}"
  done
fi

[ ! "${PROJECT_DIR-}" ] || for dir in src/bin src/scripts scripts bin sbin; do
  dir="${PROJECT_DIR}/${dir}"
  [ ! -d "${dir}" ] || export PATH="${dir}:${PATH}"
done
export MANPATH="${PROJECT_DIR}/share/man${MANPATH:+:${MANPATH}}"

container() {
  # TODO: Do not setup manpath y path for container. Do it with the scripts ?
  image="${1}"
  shift
  docker run -i \
    --rm \
    -e PATH="${PATH}" \
    -e MANPATH="${MANPATH}" \
    -v "${PROJECT_DIR}:${PROJECT_DIR_CONTAINER}" \
    --entrypoint /bin/sh \
    "${image}" \
    -c "$*"
}

detach() {
  image="${1}"
  shift
  docker run -it \
    -e PATH="${PATH}" \
    -e MANPATH="${MANPATH}" \
    -v "${PROJECT_DIR}:${PROJECT_DIR_CONTAINER}" \
    --entrypoint /bin/sh \
    "${1}"
}

