# shellcheck shell=sh disable=SC3028

# Installs, sources bats libraries and add repository: bin, test, scripts directories to PATH, excluding backup and tmp.
#

if ! command -v assert_equal > /dev/null; then
  BATS_LIBS='bats-assert bats-file bats-support'
  BATS_LIBS_DIRS=''
  BATS_LIBS_FUNCS='assert_equal assert_file_exist batslib_err'
  BATS_TOP="$(git top || true)"; export BATS_TOP
  BATS_TOP_NAME="$(basename "${BATS_TOP}" || true)"; export BATS_TOP_NAME
  BATS_TEST_PREFIX="$(basename "${BATS_TEST_FILENAME}" .bats || true)"; export BATS_TEST_PREFIX
  [ ! "${BATS_TOP-}" ] || for i in src/bin src/scripts scripts bin sbin; do
    d="${BATS_TOP}/${i}"
    [ ! -d "${d}" ] || export PATH="${d}:${PATH}"
  done

  dir="${RCSHARE:-/tmp}/bats"
  [ -d "${dir}" ] || mkdir "${dir}"

  for i in ${BATS_LIBS}; do
    d="${dir}/${i}"; BATS_LIBS_DIRS="${d} ${BATS_LIBS_DIRS}"
    if [ ! -d "${d}" ]; then
      git clone --quiet "https://github.com/bats-core/${i}.git" "${d}" || { return >/dev/null || exit; }
    elif [ "${FORCE-}" ]; then
      git -C "${d}" pull --quiet --force || { return >/dev/null || exit; }
    fi
    [ ! "${BASH_VERSION-}" ] || . "${d}/load.bash"
  done
  [ ! "${BASH_VERSION-}" ] || for i in ${BATS_LIBS_FUNCS}; do
    command -v "${i}" >/dev/null || { return >/dev/null || exit; }
  done

  unset d dir i
fi
