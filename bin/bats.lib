# shellcheck shell=bash disable=SC2034

# Installs, sources bats libraries and add repository: bin, test, scripts directories to PATH, excluding backup and tmp.
#

# Current working directory
#
declare BATS_CWD

# Error status
#
declare BATS_ERROR_STATUS

# (default: bats) specifies the extension of test files that should be found when running a suite
# (via bats [-r] suite_folder/)
declare BATS_FILE_EXTENSION

# A temporary directory common to all tests of a test file.
# Could be used to create files required by multiple tests in the same test file
declare BATS_FILE_TMPDIR

# Library directory:
# Applications/PyCharm.app/Contents/bin/plugins/bashsupport-pro/bats-core/libexec/bats-core
declare BATS_LIBEXEC

# Output file:
# /var/folders/3c/k3_3r82s08q31699vdnxd2s00000gp/T/bats-run-6576/bats.6612.out
declare BATS_OUT

# Name (not a file/file):
# /var/folders/3c/k3_3r82s08q31699vdnxd2s00000gp/T/bats-run-7204/bats.7229
declare BATS_PARENT_TMPNAME

# The repository of bats-core :
# /Applications/PyCharm.app/Contents/bin/plugins/bashsupport-pro/bats-core
declare BATS_ROOT

# Command just run (everything but run until any pipe): run foo nofile would give 'foo nofile'
#
declare BATS_RUN_COMMAND

# The location to the temporary directory used by bats to store all its internal temporary files during the tests.
# (default: $BATS_TMPDIR/bats-run-$BATS_ROOT_PID-XXXXXX)
# /var/folders/3c/k3_3r82s08q31699vdnxd2s00000gp/T/bats-run-7845
declare BATS_RUN_TMPDIR

# A temporary directory common to all tests of a suite. Could be used to create files required by multiple tests
#
declare BATS_SUITE_TMPDIR

# The (1-based) index of the current test case in the test suite (over all files)
#
declare BATS_SUITE_TEST_NUMBER

# The description of the current test case.
#
declare BATS_TEST_DESCRIPTION

# The directory in which the Bats test file is located:
# /Applications/PyCharm.app/Contents/bin/scratches/bats-tests-vars
declare BATS_TEST_DIRNAME

# The fully expanded path to the Bats test file:
# /Applications/PyCharm.app/Contents/bin/scratches/bats-tests-vars/binman.bats
declare BATS_TEST_FILENAME

# The name of the function containing the current test case:
# /Applications/PyCharm.app/Contents/bin/scratches/bats-tests-vars/binman.bats
declare BATS_TEST_NAME

# An array of function names for each test case:
# /Applications/PyCharm.app/Contents/bin/scratches/bats-tests-vars
declare -a BATS_TEST_NAMES

# The (1-based) index of the current test case in the test file:
# 1
declare BATS_TEST_NUMBER

# Source file generated from the bats file:
# /var/folders/3c/k3_3r82s08q31699vdnxd2s00000gp/T/bats-run-7606/bats.7632.src
declare BATS_TEST_SOURCE

# A a temporary directory unique for each test.
# Could be used to create files required only for specific tests
declare BATS_TEST_TMPDIR

# The location to a directory that may be used to store temporary files:
# /var/folders/3c/k3_3r82s08q31699vdnxd2s00000gp/T
declare -x BATS_TMPDIR

# Temp file name under $BATS_RUN_TMPDIR (not created):
# /var/folders/3c/k3_3r82s08q31699vdnxd2s00000gp/T/bats-run-7606/bats.7642
declare BATS_TMPNAME


if ! command -v assert_equal > /dev/null; then
  # <html><h2>Run Only Local Tests (not Docker)</h2>
  # <p><strong><code>$BATS_LOCAL</code></strong> if set to 1 will set $BATS_DOCKER to false and viceversa.</p>
  # </html>
  declare BATS_LOCAL

  # <html><h2>Boolean Run Docker Tests (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_DOCKER</code></strong> will be set by bats.lib to true if $BATS_LOCAL is set to 1</p>
  # <p> and viceversa to false if $BATS_LOCAL is 0.</p>
  # </html>
  BATS_DOCKER=false; [ "${BATS_LOCAL}" -eq 1 ] || BATS_DOCKER=true

  # <html><h2>Bats Libraries Repository Names (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_LIBS</code></strong>.</p>
  # </html>
  BATS_LIBS='bats-assert bats-file bats-support'

  # <html><h2>Bats Libraries Installation Paths (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_LIBS_DIRS</code></strong>.</p>
  # </html>
  BATS_LIBS_DIRS=''

  # <html><h2>Bats Libraries Sample Functions to test Bats Libraries (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_LIBS_FUNCS</code></strong>.</p>
  # </html>
  BATS_LIBS_FUNCS='assert_equal assert_file_exist batslib_err'

  # <html><h2>Git Top Path (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_TOP</code></strong> contains the git top directory when sourced from a git dir.</p>
  # </html>
  BATS_TOP="$(git top || true)"

  # <html><h2>Git Top Basename (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_TOP_NAME</code></strong> basename of git top directory when sourced from a git dir.</p>
  # </html>
  BATS_TOP_NAME="$(basename "${BATS_TOP}" || true)"

  # <html><h2>Bats Test Filename Prefix (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_TEST_PREFIX</code></strong> prefix of BATS_TEST_DIRNAME basename.</p>
  # </html>
  BATS_TEST_PREFIX="$(basename "${BATS_TEST_FILENAME}" .bats || true)"

  [ ! "${BATS_TOP-}" ] || for i in src/bin src/scripts scripts bin sbin; do
    d="${BATS_TOP}/${i}"
    [ ! -d "${d}" ] || export PATH="${d}:${PATH}"
  done
  export MANPATH="${BATS_TOP}/share/man${MANPATH:+:${MANPATH}}"

  dir="${RCSHARE:-/tmp}/bats"
  [ -d "${dir}" ] || mkdir "${dir}"

  for i in ${BATS_LIBS}; do
    d="${dir}/${i}"; BATS_LIBS_DIRS="${d} ${BATS_LIBS_DIRS}"
    if [ ! -d "${d}" ]; then
      git clone --quiet "https://github.com/bats-core/${i}.git" "${d}" || { return >/dev/null || exit; }
    elif [ "${FORCE-}" ]; then
      git -C "${d}" pull --quiet --force || { return >/dev/null || exit; }
    fi
    [ ! "${BASH_VERSION-}" ] || . "${d}/load.bash"
  done
  [ ! "${BASH_VERSION-}" ] || for i in ${BATS_LIBS_FUNCS}; do
    command -v "${i}" >/dev/null || { return >/dev/null || exit; }
  done

  unset d dir i
fi
