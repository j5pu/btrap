# shellcheck shell=bash disable=SC2034

# Installs, sources bats libraries and add repository: bin, test, scripts directories to PATH, excluding backup and tmp.
#

if ! command -v assert_equal > /dev/null; then
  # <html><h2>Run Only Local Tests (not Docker)</h2>
  # <p><strong><code>$BATS_LOCAL</code></strong> if set to 1 will set $BATS_DOCKER to false and viceversa.</p>
  # </html>
  BATS_LOCAL="${BATS_LOCAL:-0}"

  # <html><h2>Boolean Run Docker Tests (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_DOCKER</code></strong> will be set by bats.lib to true if $BATS_LOCAL is set to 1</p>
  # <p> and viceversa to false if $BATS_LOCAL is 0.</p>
  # </html>
  export BATS_DOCKER=false; [ "${BATS_LOCAL}" -eq 1 ] || BATS_DOCKER=true

  # <html><h2>Bats Libraries Repository Names (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_LIBS</code></strong>.</p>
  # </html>
  BATS_LIBS='bats-assert bats-file bats-support'

  # <html><h2>Bats Libraries Installation Paths (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_LIBS_DIRS</code></strong>.</p>
  # </html>
  BATS_LIBS_DIRS=''

  # <html><h2>Bats Libraries Sample Functions to test Bats Libraries (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_LIBS_FUNCS</code></strong>.</p>
  # </html>
  BATS_LIBS_FUNCS='assert_equal assert_file_exist batslib_err'

  # <html><h2>Git Top Path (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_TOP</code></strong> contains the git top directory when sourced from a git dir.</p>
  # </html>
  BATS_TOP="$(git top || true)"

  # <html><h2>Git Top Basename (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_TOP_NAME</code></strong> basename of git top directory when sourced from a git dir.</p>
  # </html>
  BATS_TOP_NAME="$(basename "${BATS_TOP}" || true)"

  # <html><h2>Bats Test Filename Prefix (when sourcing: bats.lib)</h2>
  # <p><strong><code>$BATS_TEST_PREFIX</code></strong> prefix of BATS_TEST_DIRNAME basename.</p>
  # </html>
  BATS_TEST_PREFIX="$(basename "${BATS_TEST_FILENAME}" .bats || true)"

  [ ! "${BATS_TOP-}" ] || for i in src/bin src/scripts scripts bin sbin; do
    d="${BATS_TOP}/${i}"
    [ ! -d "${d}" ] || export PATH="${d}:${PATH}"
  done
  export MANPATH="${BATS_TOP}/share/man${MANPATH:+:${MANPATH}}"

  dir="${RCSHARE:-/tmp}/bats"
  [ -d "${dir}" ] || mkdir "${dir}"

  for i in ${BATS_LIBS}; do
    d="${dir}/${i}"; BATS_LIBS_DIRS="${d} ${BATS_LIBS_DIRS}"
    if [ ! -d "${d}" ]; then
      git clone --quiet "https://github.com/bats-core/${i}.git" "${d}" || { return >/dev/null || exit; }
    elif [ "${FORCE-}" ]; then
      git -C "${d}" pull --quiet --force || { return >/dev/null || exit; }
    fi
    [ ! "${BASH_VERSION-}" ] || . "${d}/load.bash"
  done
  [ ! "${BASH_VERSION-}" ] || for i in ${BATS_LIBS_FUNCS}; do
    command -v "${i}" >/dev/null || { return >/dev/null || exit; }
  done

  unset d dir i
fi
