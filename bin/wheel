#!/bin/sh

# User to root/wheel group, directory write all, root password and updates files: sudoers.d and $PASSWORD_FILE
#

. helpers.lib

script="${0##*/}"
sudoers="$(cat <<EOF
# Auto generated by: ${0}

# To update, run:
#   ${script}

User_Alias ADMINS = %admin, %sudo, %wheel
Defaults:ADMINS always_set_home, !authenticate, !env_reset, !logfile, runchroot=*, runcwd=*, shell_noargs, !syslog
EOF
)"

_cmp() {
  i=1
  # shellcheck disable=SC2034
  while read -r line; do
    [ "${line}" = "$(sed -n "${i}"p "${2}" 2>/dev/null)" ] || { return 1 2>/dev/null || exit 1; }
    i="$((i+1))"
  done < "${1}" 2>/dev/null
}

_password() {
  if $first; then
    admin && first=false
  else
    die Password Must Be First Option: "${arg}"
  fi
}

_sudo() {
  if test "${2-}"; then
    echo "${1:-}" | sudo -S "$@"
  else
    echo "${1:-}" | sudo -S true
  fi
}

_user() { echo "${user:-$(printf '%s\n' "${USER}" "${SUDO_USER}" | grep -v 'root' | sort -u)}"; }

add_user_to_group() {
  group="${group:-$(id -ng 'root')}"
  user="${user:-$(printf '%s\n' "${USER}" "${SUDO_USER}" | grep -v 'root' | sort -u)}"
  if test "${user-}" && id -nG "${user}" | tr ' ' '\n' | grep -q "${group}"; then
    if $MACOS; then
      sudo dscl . -append /Groups/"${group}" GroupMembership "${user}" || die
    else
      sudo usermod -aG "${group}" "${user}" || die
    fi
    success User: "${user}", appended to group: "${group}"
  fi
}

admin() {
  if ! $executed; then
    if [ -d "${sudoers_dir}" ]; then
      if { [ "$(find "${sudoers_dir}" -type f -not -name "README")" = '' ] && test "${password}" \
        || _sudo "${password}" 2>&1 | grep -qv password; }; then
        green "Enter admin password: " >&2
        read -r password
      fi
    else
      mkdir "${sudoers_dir}"
    fi
    directory="$(dirname "${PASSWORD_FILE}")"
    _sudo "${password}" || die Invalid Password: "${password}"
    _sudo "${password}" mkdir -p "${directory}" || die
    if [ "${password}" != "${PASSWORD:-}" ]; then
      tmp_password="$(mktemp)"
      cat > "${tmp_password}" <<EOF
# Auto generated by: ${0}

# To update, run one of:
#   ${script} --password=password
#   PASSWORD=password sudo --password

export PASSWORD='${password}'
EOF
      if _sudo cp -r "${tmp_password}" "${PASSWORD_FILE}"; then
        success Created: "${PASSWORD_FILE}"
      else
        die Can´t Create: "${PASSWORD_FILE}"
      fi
    fi
    executed=true
    sudoers_update
    add_user_to_group
    change_dir "${directory}"
    if echo "$0" | grep -q '^/bin|^/sbin|^/usr|^/opt' && prefered_shell | grep -qE '^/bin|^/sbin|^/usr|^/opt'; then
      change_shells
    fi
  fi
}

change_dir() {
  $executed || admin
  directory="${1:-/usr/local}"
  "$0" mkdir -p "${directory}"
  "$0" chmod g+w "${directory}"
  "$0" chown -R :"${group:-$(id -ng  'root')}" "${directory}"
}

change_shells() {
  shell="${1:-$(prefered_shell)}"
  users="$(_user) root"
  for i in ${users}; do
    change_user_shell "${i}" "${shell}"
  done
}

change_user_shell() {
  current="$(get_user_shell "${1:-${USER}}")"
  prefered_shell="$(prefered_shell)"
  if [ "${current}" != "${2:-${prefered_shell}}" ]; then
    grep -q /usr/local/bin/bash /etc/shells || echo /usr/local/bin/bash | sudo tail -a /etc/shells >/dev/null || die
    grep -q "${2:-${prefered_shell}}" /etc/shells \
      || echo "${2:-${prefered_shell}}" | sudo tail -a /etc/shells >/dev/null || die
    if $MACOS; then
      sudo dscl . -change "/Users/${1:-${USER}}" UserShell "${current}" "${2:-${prefered_shell}}" >/dev/null || die
    fi
    sudo chsh -s "${2:-${prefered_shell}}" "${1}" >/dev/null
    success Shell Changed for: "${1:-${USER}}", from "${current}", to: "${2:-${prefered_shell}}"
  fi
}

# TODO: move the use create y otras funciones a utils que.... en scratches
#   test lo del passwd -d root pero antes hay que poner contraseña o deja quitarla sin tener nada puesto.
enable_root() {
  # https://www.maketecheasier.com/enable-root-user-mac/
  test "${PASSWORD:-}" || die Undefined Variable: PASSWORD
  if $MACOS; then
    if sudo dscl . -read /Users/root Password 2>&1 | grep -q 'No such key:'; then
      sudo dsenableroot -u "${1:-$(user)}" -p "${PASSWORD}" -r "${PASSWORD}" >/dev/null || die
    fi
    sudo dscl . -read /Users/root Password 2>&1 | grep -q 'Password:' || die Root Not Enabled
  else
    sudo passwd -d root
  fi
}

get_user_shell() {
  if $MACOS; then
    dscl . -read /Users/"${1:-${USER}}" UserShell | awk '{print $2}' || die
  else
    awk -F: -v user="${1:-${USER}}" '$1 == user {print $NF}' /etc/passwd || die
  fi
}

prefered_shell() { has --path --value bash || has --path --value sh || die Shell Not Found; }

sudoers_update() {
  tmp="$(mktemp)"
  echo "${sudoers}" > "${tmp}"
  if ! _cmp "${tmp}" "${sudoers_file}" 2>/dev/null; then
    _sudo "${password}" cp -r "${sudoers_dir}" "${sudoers_dir}-bk" && verbose Sudoers Backup: /etc/sudoers.d-bk
    _sudo "${password}" cp -r "${tmp}" "${sudoers_dir}" && verbose Sudoers Created: "${sudoers_file}"
    tmp_files="$(mktemp)"
    find "${sudoers_dir}" -type f -not -name "${script}" > "${tmp_files}"
    while read -r i; do
      _sudo "${password}" rm "${i}" || die
    done < "${tmp_files}"
    verbose Sudoers Cleaned
    if _sudo; then success Sudoers Working; else die Sudoers Not Working; fi
  fi
}

main() {
  test "${MACOS-}" || die Undefined variable: MACOS
  test "${PASSWORD_FILE-}" || die Undefined variable: PASSWORD_FILE

  if test "$#" -eq 0 || { test "${1-}" = '--parsed' && shift; }; then
    change_shells=false
    change_user_shell=false
    executed=false
    first=true
    for arg do
      shift
      case "${arg}" in
        --change-shells=*) change_shells=true; shell="${arg#--change-shells=}" ;;
        --change-shells) change_shells=true ;;
        --change-user-shell=*) change_user_shell=true; shell="${arg#--change-user-shell=}" ;;
        --change-user-shell) change_user_shell=true ;;
        --get-user-shell=*) get_user_shell "${arg#--get-user-shell=}" || exit ;;
        --get-user-shell) get_user_shell || exit ;;
        --user=*) user="${arg#--user=}" || exit ;;
        --password=*) password="${arg#--password=}"; _password || exit ;;
        --password) password=''; _password || exit ;;
        *) change_dir "${arg}" || exit ;;
      esac
    done

    sudoers_dir='/etc/sudoers.d'
    sudoers_file="${sudoers_dir}/${script}"
    password="${password:-${PASSWORD:-}}"
    . "${PASSWORD_FILE-}" 2>/dev/null || true

    if $change_user_shell; then
      change_user_shell "${user:-}" "${shell:-}"
    elif $change_shells; then
      change_shells "${shell:-}"
    else
      admin
    fi
  else
    PARSE="${0}" parse --novars "$@"
  fi
}

main "$@"
