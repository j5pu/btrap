# shellcheck shell=sh

# System and initial $PATH library (when sourced, only from profile.lib
#
file="${RC_D}/system.sh"

if [ ! -r "${file}" ] || [ "${FORCE-0}" = 0 ]; then
  PATH="${BASE_PATH:-${PATH}}"; export PATH
  lib='system.lib'

# <html><h2>User System Login Password</h2>
# <p><strong><code>$PASSWORD</code></strong> contains the User System Login Password.</p>
# <h3>Examples</h3>
# <dl>
# <dt>To update it, sourcing system profile:</dt>
# <dd>
# <pre><code class="language-bash">FORCE=1 PASSWORD='new' . /etc/profile
# </code></pre>
# </dd>
# </dl>
# <dt>To update it, running profile.lib:</dt>
# <dd>
# <pre><code class="language-bash">PASSWORD='new' profile.lib --force
# </code></pre>
# </dd>
# </dl>
# </html>
  PASSWORD_FILE="${RC_D}/password.sh"; export PASSWORD_FILE

# <html><h2>User System Login Password</h2>
# <p><strong><code>$PASSWORD</code></strong> contains the User System Login Password.</p>
# </html>
  PASSWORD="${PASSWORD:-$(cat "${PASSWORD_FILE}" 2>/dev/null || true)}"; export PASSWORD

# <html><h2>Sudo Executable Path Excluding sbin</h2>
# <p><strong><code>$SUDO_BIN</code></strong> contains sudo path if installed on the system.</p>
# </html>
  SUDO_BIN="$(command -pv sudo || true)"; export SUDO_BIN

# <html><h2>Sudo Executable Path Excluding sbin</h2>
# <p><strong><code>$SUDO_BIN</code></strong> contains sudo path if installed on the system.</p>
# </html>
  SUDO_BIN_USER="${SUDO_BIN:+${SUDO_BIN} -u ${USER}}"; export SUDO_BIN_USER
  if { [ "$(id -u)" -eq 0 ] && [ "${SUDO_UID:-}" != 0 ]; } || { [ "$(id -u)" -ne 0 ] && [ "${SUDO_UID:-}" = 0 ]; }; then
    : No se actualizaria mover al profile.lib si quiero actualizar la variable y que solo vaya cuando no es root USAR EL SUDO DE SBIN cambiarlo a bin y poner a mano el enlace a /usr/bin/sudo y ponerlo que use udo con la formula if de arriba.
  fi
  # TODO: permisos del /usr/local y hacerlo
  # TODO: actualizar el /etc/profile (en install)
  # TODO: poner los SUDO_BIN en todas las librerÃ­as. Y cambiarlo por SUDO_BIN_USER.
  if ! test -w /etc && ! ${SUDO_BIN} test -w /etc 2>/dev/null; then
     ${SUDO_BIN} tee /etc/sudoers.d/os.lib > /dev/null <<EOF
# Auto generated by: ${lib}

# To update, run one of:
#   FORCE=1 . /etc/profile
#   FORCE=1 . profile.lib
#   profile.lib --force

User_Alias ADMINS = %admin, %sudo, %wheel
Defaults:ADMINS always_set_home, !authenticate, !env_reset, !logfile, runchroot=*, runcwd=*, shell_noargs, !syslog
EOF
  fi

  if test "${SUDO_BIN-}" && echo "${PASSWORD}" | ${SUDO_BIN} -S test -w /etc; then
    tee "${PASSWORD_FILE}" > /dev/null <<EOF
# Auto generated by: ${lib}

# To update, run one of:
#   FORCE=1 . /etc/profile
#   FORCE=1 . profile.lib
#   profile.lib --force

export PASSWORD='${PASSWORD}'
EOF
  fi

  [ -d "${dir}" ] || ${SUDO_BIN} mkdir "${dir}"
  # <html><h2>First part of hostname</h2>
# <p><strong><code>$HOST</code></strong> (always exported).</p>
# <ul>
# <li><code>foo.com</code>: foo</li>
# <li><code>example.foo.com</code>: example</li>
# </ul>
# </html>
  HOST="$({ hostname || cat /etc/hostname; } | cut -d. -f1)"; export HOST

  # <html><h2>Operating System System Name</h2>
# <p><strong><code>$UNAME</code></strong> (always exported).</p>
# <ul>
# <li><code>darwin</code></li>
# <li><code>linux</code></li>
# </ul>
# </html>
  UNAME="$(uname -s | tr '[:upper:]' '[:lower:]')"; export UNAME

  if [ "${UNAME}" = 'darwin' ]; then
    # <html><h2>Distribution ID</h2>
    # <p><strong><code>$DIST_ID</code></strong> (always exported).</p>
    # <ul>
    # <li><code>alpine</code></li>
    # <li><code>centos</code></li>
    # <li><code>debian</code></li>
    # <li><code>kali</code></li>
    # <li><code>macOS</code></li>
    # <li><code>ubuntu</code></li>
    # </ul>
    # </html>
    DIST_ID="$(sw_vers -ProductName)"; export DIST_ID
    # <html><h2>Distribution Version</h2>
# <p><strong><code>$DIST_ID</code></strong> (always exported).</p>
# <ul>
# <li><code>macOS</code>: 10.15.1, 10.16 ...</li>
# <li><code>kali</code>: 2021.2, ...</li>
# <li><code>ubuntu</code> 20.04, ...</li>
# </ul>
# </html>
    DIST_VERSION="$(sw_vers -ProductVersion)"; export DIST_VERSION
    # <html><h2>Distribution Codename</h2>
# <p><strong><code>$DIST_CODENAME</code></strong> (always exported).</p>
# <ul>
# <li><code>Catalina</code></li>
# <li><code>Big Sur</code></li>
# <li><code>kali-rolling</code></li>
# <li><code>focal</code></li>
# <li><code>etc.</code></li>
# </ul>
# </html>
    export DIST_CODENAME
    case "$(echo "${DIST_VERSION}" | awk -F. '{ print $1 $2 }')" in
      1013) DIST_CODENAME='High Sierra' ;;
      1014) DIST_CODENAME='Mojave' ;;
      1015) DIST_CODENAME='Catalina' ;;
      11*) DIST_CODENAME='Big Sur' ;;
      12*) DIST_CODENAME='Monterey' ;;
      *) DIST_CODENAME='Other' ;;
    esac
    # Homebrew prefix (brew shellenv)
    #
    export HOMEBREW_PREFIX="/usr/local"
    # <html><h2>Is MACOS?</h2>
    # <p><strong><code>$MACOS</code></strong> (always exported).</p>
    # <p><strong><code>Boolean</code></strong></p>
    # <ul>
    # <li><code>true</code>: $UNAME is darwin</li>
    # <li><code>false</code>: $UNAME is linux</li>
    # </ul>
    # </html>
    export MACOS='true'; macos=true
    # <html><h2>Default Package Manager</h2>
    # <p><strong><code>$PM</code></strong> (always exported).</p>
    # <ul>
    # <li><code>apk</code></li>
    # <li><code>apt</code></li>
    # <li><code>brew</code></li>
    # <li><code>nix</code></li>
    # <li><code>yum</code></li>
    # </ul>
    # </html>
    export PM='brew'
    # <html><h2>Default Package Manager with Install Options</h2>
# <p><strong><code>$PM_INSTALL</code></strong> (always exported).</p>
# <p><strong><code>Quiet and no cache (for containers)</code></strong>.</p>
# <ul>
# <li><code>apk</code></li>
# <li><code>apt</code></li>
# <li><code>brew</code></li>
# <li><code>nix</code></li>
# <li><code>yum</code></li>
# </ul>
# </html>
    export PM_INSTALL="${PM} install"
    # PyCharm contents (initial plugins, etc.).
    #
    export PYCHARM_CONTENTS='/Applications/PyCharm.app/Contents'
    # PyCharm repository, application executable and configuration full path.
    #
    export PYCHARM="${PYCHARM_CONTENTS}/bin"
  else
    HOMEBREW_PREFIX='/home/linuxbrew/.linuxbrew'
    MACOS='false'; macos=false
  fi

  # Homebrew etc
  #
  export HOMEBREW_ETC="${HOMEBREW_PREFIX}/etc"
  # Version of formula, $HOMEBREW_PREFIX/opt is a symlink to $HOMEBREW_CELLAR (brew shellenv).
  #
  export HOMEBREW_CELLAR
  # Brew bash completion (bash_completion.d) compat directory $BASH_COMPLETION_COMPAT_DIR, under etc.
  #
  export HOMEBREW_COMPLETION
  # Symlink for the latest version of formula to $HOMEBREW_CELLAR.
  #
  export HOMEBREW_OPT
  # Profile compat dir (profile.d), under etc.
  #
  export HOMEBREW_PROFILE
  # Repository and Library with homebrew gems and Taps (brew shellenv).
  #
  export HOMEBREW_REPOSITORY
  # Taps path under '$HOMEBREW_REPOSITORY/Library'.
  #
  export HOMEBREW_TAPS

  tee "${file}" > /dev/null <<EOF
# shellcheck shell=sh disable=SC2034

# (auto generated by: os.lib)

export DIST_CODENAME='${DIST_CODENAME}'
export DIST_ID='${DIST_ID}'
export DIST_VERSION='${DIST_VERSION}'
export HOMEBREW_CELLAR='${HOMEBREW_PREFIX}/Cellar'
export HOMEBREW_COMPLETION='${HOMEBREW_ETC}/bash_completion.d'
export HOMEBREW_ETC='${HOMEBREW_ETC}'
export HOMEBREW_OPT='${HOMEBREW_PREFIX}/opt'
export HOMEBREW_PROFILE='${HOMEBREW_ETC}/profile.d'
export HOMEBREW_COMPLETION='${HOMEBREW_ETC}/bash_completion.d'
export HOMEBREW_REPOSITORY='${HOMEBREW_PREFIX}/Homebrew'
export HOMEBREW_TAPS='${HOMEBREW_REPOSITORY}/Library/Taps'
export HOST='${HOST}'
export MACOS=${MACOS}
export PM='${PM}'
export PM_INSTALL='${PM_INSTALL}'
export UNAME='${UNAME}'

EOF

  if $macos; then tee -a "${file}" > /dev/null <<EOF
export PYCHARM_CONTENTS='${PYCHARM_CONTENTS}'
export PYCHARM='${PYCHARM_CONTENTS}/bin'
EOF
  else
    f='/etc/os-release'
    if test -f "${f}"; then
      while IFS='=' read -r var value; do
        case "${var}" in
          ID)
            DIST_ID="${value}"
            case "${DIST_ID}" in
              alpine)
                # '1' if 'DIST_ID' is 'alpine'
                #
                export ALPINE
                # '1' if 'DIST_ID' is 'alpine'
                #
                export ALPINE_LIKE
                # <alpine|debian|rhel fedora>.
                #
                export DIST_ID_LIKE
                {
                  echo 'export ALPINE=1'
                  echo 'export ALPINE_LIKE=1'
                  echo "export DIST_ID_LIKE='${DIST_ID}'"
                } >> "${file}"
                if [ -r '/etc/nix' ]; then
                  # '1' if 'DIST_ID' is 'alpine' and '/etc/nix'.
                  #
                  export NIXOS
                  echo 'export NIXOS=1' >> "${file}"
                  PM='nix-env'
                else
                  PM='apk'
                fi
                ;;
              arch)
                # '1' if 'DIST_ID' is 'arch'
                #
                export ARCHLINUX
                echo 'export ARCHLINUX=1' >> "${file}"
                PM='pacman'
                ;;
              centos)
                # '1' if 'DIST_ID' is 'centos'.
                #
                export CENTOS
                echo 'export CENTOS=1' >> "${file}"
                PM='yum'
                ;;
              debian)
                # '1' if 'DIST_ID' is 'debian'.
                #
                export DEBIAN
                # '1' if 'DIST_ID_LIKE is 'debian'.
                #
                export DEBIAN_LIKE
                {
                  echo 'export DEBIAN=1'
                  echo 'export DEBIAN_LIKE=1'
                  echo "export DIST_ID_LIKE='${DIST_ID}'"
                } >> "${file}"
                ;;
              fedora)
                # '1' if 'DIST_ID' is 'fedora' or 'fedora' in 'DIST_ID_LIKE'.
                #
                export FEDORA_LIKE
                # '1' if 'DIST_ID' is 'fedora'.
                #
                export FEDORA
                {
                  echo 'export FEDORA=1'
                  echo 'export FEDORA_LIKE=1'
                } >> "${file}"
                PM='dnf'
                ;;
              kali)
                # '1' if 'DIST_ID' is 'kali'.
                #
                export KALI
                echo 'export KALI=1' >> "${file}"
                ;;
              rhel)
                # '1' if 'DIST_ID' is 'rhel'.
                #
                export RHEL
                # '1' if 'DIST_ID' is 'rhel' or 'rhel' in 'DIST_ID_LIKE'.
                #
                export RHEL_LIKE
                {
                  echo 'export RHEL=1'
                  echo 'export RHEL_LIKE=1'
                } >> "${file}"
                PM='yum'
                ;;
              ubuntu)
                # '1' if 'DIST_ID' is 'ubuntu'.
                #
                export UBUNTU
                echo 'export UBUNTU=1' >> "${file}"
                ;;
              *)
                # '1' if 'DIST_ID' is unknown.
                #
                export DIST_UNKNOWN
                echo 'export DIST_UNKNOWN=1' >> "${file}"
                ;;
            esac
            ;;
          ID_LIKE)
            DIST_ID="${value}"
            case "${DIST_ID}" in
              debian)
                echo 'export DEBIAN_LIKE=1' >> "${file}"
                PM='apt'
                ;;
              *fedora*) echo 'export FEDORA_LIKE=1' >> "${file}" ;;
              *rhel*) echo 'export RHEL_LIKE=1' >> "${file}" ;;
            esac
            ;;
          VERSION_ID) DIST_VERSION="${value}" ;;
          VERSION_CODENAME) DIST_CODENAME="${value}" ;;
        esac
      done < "${f}"
    else
      # '1' if not '/etc/os-release' and not '/sbin'.
      #
      export BUSYBOX
      [ -d '/sbin' ] && echo 'export BUSYBOX=1' >> "${file}"
    fi
  fi

  case "${PM}" in
    apk) PM_INSTALL='add -q --no-progress'; no_cache='--no-cache' ;;
    apt) PM_INSTALL='install -y -qq' ;;
    brew) PM_INSTALL='install --quiet' ;;
    dnf) PM_INSTALL='install -y -q' ;;
    nix) PM_INSTALL='--install -A' ;; # nixos -> nixos.curl, no nixos --> nixpkgs.curl
    pacman) PM_INSTALL='-S --noconfirm' ;;
    yum) PM_INSTALL='install -y -q' ;;
  esac

  [ "${PM-}" ] && [ "${PM_INSTALL-}" ] && PM_INSTALL="${PM} ${PM_INSTALL}"
  if [ "${SSH_CLIENT-}" ] || [ "${SSH_CONNECTION-}" ] || [ "${SSH_TTY-}" ]; then
    # '1' if 'SSH_CLIENT' or 'SSH_TTY' or 'SSH_CONNECTION'.
    #
    export SSH
    echo 'export SSH=1' >> "${file}"
    # Symbol and 'HOST' if 'CONTAINER' or 'SSH'.
    export HOST_PROMPT='ê¿';
  fi
  if [ -f '/proc/1/environ' ] || [ -f '/.dockerenv' ]; then
    # '1' if running in docker container.
    #
    export CONTAINER
    echo 'export CONTAINER=1' >> "${file}"
    HOST_PROMPT='â'
    # 'noninteractive' if 'IS_CONTAINER' and 'DEBIAN_LIKE' are set.
    #
    export DEBIAN_FRONTEND
    [ "${DIST_ID}" = 'debian' ] && echo "export DEBIAN_FRONTEND='noninteractive'" >> "${file}"
    [ "${PM_INSTALL-}" ] && PM_INSTALL="${PM_INSTALL} ${no_cache}"
  fi
  [ ! "${HOST_PROMPT-}" ] || echo "export HOST_PROMPT='${HOST_PROMPT} ${HOST}'" >> "${file}"


  # Bash executable path excluding sbin.
  #
  export BASH_BIN
  # Brew executable path excluding sbin.
  #
  export BREW_BIN
  # Git executable path excluding sbin.
  #
  export GIT_BIN
  # Sh executable path excluding sbin.
  #
  export SH_BIN
  for i in bash brew git sh; do
    echo "export $(echo "${i}" | tr '[:lower:]' '[:upper:]')_BIN=$(sh -c "PATH=\$(echo ${PATH} | tr ':' '\n' | \
        grep -v sbin | tr '\n' ':') type -p ${i}")" >> "${file}"
  done


  unset macos f i lib
fi

test "${UNAME-}" || . "${file}"

####################################### Executed: force & parse
#
if test "$#" -ne 0 && test "${PARSED-}"; then
  unset PARSE PARSED
  case "$1" in
    --force) shift; FORCE=1 . profile.lib
  esac
elif test "$#" -ne 0; then
  . helpers.lib
  PARSE="$0" parse "$@"
fi
