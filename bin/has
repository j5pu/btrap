#!/bin/sh

# Check if an executable exists
#
STRICT=1 . helpers.lib

doc() { docker run -i --rm --entrypoint sh "${image}" -c "${c} ${executable}"; }
loc() { ${c} "${executable}"; }

#######################################
# Check if an executable exists (which) excluding rc SBIN
# Arguments:
#   -a                  Find all paths ('type -aP' or 'which -a' when 'type -a' is not available).
#   -p                  Use path (ignore for '-a').
#   -v                  Show value (ignore for '-a').
#   --exclude=<exe>     Exclude executable (sets the '-a' option and returns all but exe)
#   executable          Executable to check (default: sudo if no image and not executable).
#   image               The image name (default: local).
# Common Arguments:
#   -h, --help          Show help from man page and exit.
#   --desc              Show description from $DESC or header file comment and exit.
#   --manrepo           Show repository from man page and exit.
#   --version           Show version from man page and exit.
# Optional Arguments:
#   --debug             Show debug messages.
#   --dryrun            Show commands that will be executed.
#   --quiet             Silent output.
#   --verbose           Show verbose messages.
#   --warning           Show warning messages.
# Returns:
#   1 if it does not exist.
#######################################
unset BASH_ENV ENV
if [ "${PARSED-}" ] && unset PARSED; then
  all=false; c='command -v'; t='type -aP'; v=false; w='which -a'
  for arg; do
    case "${arg}" in
      -a) all=true; c="${t}";;
      -p) c="${c}p" ;;
      -v) v=true ;;
      --exclude=*) all=true; c="${t}"; exclude="$(echo "${arg}" | sed 's/--exclude=//')";;
      *)
        if [ "${executable-}" ]; then
          image="${arg}"
        elif [ ! "${arg-}" ]; then
          executable="${arg}"
        fi
        ;;
    esac
  done

  executable="${executable:-sudo}"

  if [ "${image-}" ] && $all; then
    if command -vp docker >/dev/null; then
      if docker run -i --rm --entrypoint sh "${image}" -c "${t} cut" 1>/dev/null 2>&1; then
        rv="$(doc)"; rc=$?
      else
        c="${w}"; rv="$(doc)"; rc=$?
      fi
    fi
  elif [ "${image-}" ]; then
    rv="$(doc)"; rc=$?
  elif $all; then
    if ${t} cut 1>/dev/null 2>&1; then
      rv="$(loc)"; rc=$?
    else
      c="${w}"; rv="$(loc)"; rc=$?
    fi
  else
    rv="$(loc)"; rc=$?
  fi

  if $all; then
    if [ "${exclude-}" ] && [ "${rv}" ]; then
      real="$(real "${exclude}")"; realp="$(real -P "${exclude}")"; rc=1
      for i in ${rv}; do
        { [ "${i}" = "${real}" ] || [ "${i}" = "${realp}" ]; } || { rc=0; echo "${i}"; }
      done
    elif [ "${rv-}" ]; then
      echo "${rv}"
    fi
  else
    ! $v || [ ! "${rv-}" ] || echo "${rv}"
  fi
  exit "${rc}"
else
  PARSE="${0}" parse "${@:-}"
fi
