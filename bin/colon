#!/bin/sh

# Prepend (beginning, the default), append (end) or remove to colon variables (PATH, INFOPATH, MANPATH etc.)
#
. helpers.lib

#######################################
# Prepend script directory and script directory parent with sbin to 'PATH'
# Globals:
#   DIRECTORY         The directory to prepend, append or remove.
#   SCRIPT_BIN        Script directory.
#   VALUE             Path value to manipulate.
# Outputs:
#   Updated path value.
#######################################
dev() {
  APPEND=false; REMOVE=false
  PROJECT_DIR="$(git top 2>/dev/null || findup .git )"
  if [ "${PROJECT_DIR-}" ]; then
    EXPORT='PROJECT_DIR' output "${PROJECT_DIR}"
    for i in scripts tools lib bin sbin; do
      value="$(DIRECTORY="${PROJECT_DIR}/${i}" VALUE="${value:-${PATH}}" run exists)"
      for d in src tests; do
        value="$(DIRECTORY="${PROJECT_DIR}/${d}/${i}" VALUE="${value:-${PATH}}" run exists)"
      done
    done
    EXPORT='PATH' output "${value}"
    EXPORT='MANPATH' run "${PROJECT_DIR}/share/man"
    EXPORT='INFOPATH' run "${PROJECT_DIR}/share/info"
  fi
}

# TODO: ver si el command -vp me quita el /usr/local y lo quita.
#   asi que mejor instalar el bash y el git como no link y hacer lo de brew/opt si es macos para el path
#   adaptar el has cuando el bin que lo he puesto con command -vp para que mire el brew si es mac.
#  hacer el colon bien del init y meter el CLTs.
# TODO: instalar brew en /opt/homebrew a tomar por culo y hacer el shellenv, copiar el CLT.
# TODO: setenv PATH en macOS y el /etc/environment ?
# TODO: poner el root.lib
# TODO: mover el has a executable.
# TODO: cambiar los sed --hola= por @
# TODO: mover el password file a etc/password.sh y no usar MACOS en wheel
# TODO: ver que hago ahora con el root al cambiar a opt y el profile. primero seria usar el PATH en profile.
#     mover las putas librerías a /etc/lib y ponerlas en path ... para que quiero librerías y no las llamo ejecutables
# TODO: y meto en /etc/bin con funciones que tiene mas lógica y generan el rc.d y en lib las que son lib: constantes,
#  ...
# TODO: lo mas fácil es instalar el repo en /etc directamente, a tomar por culo. y hay un fichero que llama a un
#   ejecutable qu ele dice done esta.... bueno eso ya lo dice el colon para el PATH.
# TODO: instalar entonces solo seria.. el /etc/profile
# TODO: ¿Donde meto el puto .envrc, después del colon --dev
# TODO: Update el generated with write for group y cambiar el grupo ver si git lo mantiene. lo dudo. Y si se cambia
#  también el main group del usuario y el grupo en local lo mantiene git????
# TODO: SOLUCIÓN. PRE-COMMIT CAMBIA TODOS LOS SOURCES Y CORRE UNOS TESTS. importar todas las generated.

#######################################
# Show plain output or with export command
# Globals:
#   EXPORT              Variable name to add export command.
# Arguments:
#   value               Path value to show or add export command.
# Output:
#   value or variable and value with export command.
#######################################
output() {
  if [ "${EXPORT-}" ]; then
    echo "${EXPORT}=${1}; export ${EXPORT}"
  else
    echo "${1}"
  fi
}

#######################################
# Prepend (beginning, the default), append (end) or remove
# Globals:
#   APPEND              Add at the end.
#   DIRECTORY           The directory to prepend, append or remove.
#   EXPORT              Variable name to add export command.
#   NAME                Variable name (default: PATH).
#   REMOVE              Remove for the path value.
#   VALUE               Path value to manipulate.
# Outputs:
#   Updated path value.
#######################################
run() {
  for arg do
    case "${arg}" in
      exists) [ -d "${DIRECTORY-}" ] || ! $REMOVE || { output "${VALUE}"; return 2>/dev/null || exit; }
    esac
  done
  $MIERDA
  case ":${VALUE}:" in
    *:"${DIRECTORY}":*)
      if $REMOVE; then
        output "$(echo "${VALUE}" | sed "s|${DIRECTORY}:||; s|:${DIRECTORY}||; s|${DIRECTORY}||")"
      elif [ "${VALUE-}" ]; then
        output "${VALUE}"
      fi
      ;;
    *)
      if [ "${DIRECTORY:-}" ]; then
        if $APPEND; then
          output "${VALUE:+${VALUE}:}${DIRECTORY}"
        else
          output "${DIRECTORY}${VALUE:+:${VALUE}}"
        fi
      else
        output "${VALUE}"
      fi
    ;;
  esac
}

#######################################
# Prepend (beginning, the default), append (end) or remove to colon variables (PATH, INFOPATH, MANPATH etc.)
# Globals:
#   APPEND              Add at the end.
#   DIRECTORY           The directory to prepend, append or remove.
#   EXPORT              Variable name to add export command.
#   REMOVE              Remove for the path value.
#   VALUE               Path value to manipulate.
# Optional Arguments:
#   --append            Add at the end.
#   --export=<var name> Show variable name with value and export command for eval (default: 'PATH).
#   --init              A clean new 'PATH', 'INFOPATH', or 'MANPATH' with export command is initialized.
#   --remove            Remove for the path value.
#   --base              Base init PATH
#   DIRECTORY           The directory to prepend (default), append (--append) or remove (--remove).
#                       (default: script directory and script directory parent with sbin).
#   VALUE               Path value to manipulate (default: "" if 'DIRECTORY' provided, 'PATH' if no 'DIRECTORY').
# Note:
#   Only --init will add export command by default.
# Outputs:
#   Updated path value or variable and value with export command.
# Examples:
#   $ colon
#   .../sbin:.../bin:$PATH
#   $ colon --export
#   PATH='.../sbin:.../bin:$PATH'; export PATH
#   $ colon -e
#   PATH='.../sbin:.../bin:$PATH'; export PATH
#   $ colon --base
#   /usr/...
#   $ colon /rc.d "$(colon --base)"
#   /rc.d:/usr/...
#   $ colon --base -e
#   PATH='/usr/...'; export PATH
#   $ color --init
#   PATH='...'; export PATH
#   $ colon /foo
#   foo
#   $ colon /foo -e
#   PATH='foo'; export PATH
#   $ colon /foo --export=PATH
#   PATH='foo'; export PATH
#   $ colon /foo /bar
#   /foo:/bar
#   $ colon /foo /bar --export=MANPATH
#   MANPATH='/foo:/bar'; export MANPATH
#   $ colon /foo /bar --append
#   /bar:/foo
#   $ colon /foo /bar --append --export=INFOPATH
#   INFOPATH='/bar:/foo'; export INFOPATH
#   $ colon --append /foo /bar
#   /bar:/foo
#   $ colon --append /foo /bar --export
#   PATH='/bar:/foo'; export PATH
#   $ colon /foo --remove /bar:/foo
#   /bar
#   $ colon /foo --remove /bar:/foo --export=
#   PATH='/bar'; export PATH
#######################################
main() {
  if test "$#" -eq 0 || { test "${1-}" = '--parsed' && shift; }; then
    unset DIRECTORY VALUE
    APPEND=false
    REMOVE=false
    for arg do
      case "${arg}" in
        --append) APPEND=true ;;
        --export|--export=) EXPORT='PATH' ;;
        --export=*) EXPORT="${arg#--export=}" ;;
        --remove) REMOVE=true ;;
        dev) { [ "${DEV:-0}" -eq 1 ] || exit; }; APPEND=false REMOVE=false "${arg}"; exit ;;
         *) if [ "${DIRECTORY-}" ]; then VALUE="${arg}"; else DIRECTORY="${arg}"; fi
      esac
    done
    if [ "${DIRECTORY-}" ]; then
      VALUE="${VALUE:-}"
    fi
    run
  else
    PARSE="${0}" parse "$@"
  fi
}

main "$@"
