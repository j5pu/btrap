# shellcheck shell=sh

# Shell base library
#

# <html><h2>Repository Version</h2>
# <p><strong><code>$VERSION</code></strong> contains the repository version to be shown by `parse`</p>
# <p>when --version argument is used.</p>
# <p>Set the variable after sh.lib has been sourced, otherwise sh.lib version will be used.</p>
# <h3>Examples</h3>
# <dl>
# <dt>From bash script:</dt>
# <dd>
# <pre><code class="language-bash">. .sh.lib
# VERSION='0.1.0'
# [ &quot${PARSED-}&quot ] || parse &quot${@:-}&quot
# </code></pre>
# </dd>
# </dl>
# <dl>
# <dt>From posix script:</dt>
# <dd>
# <pre><code class="language-bash">. .sh.lib
# VERSION='0.1.0'
# [ &quot${PARSED-}&quot ] || PARSE=&quot${0}&quot parse &quot${@:-}&quot
# </code></pre>
# </dd>
# </dl>
# </html>
VERSION="0.0.1"

# <html><h2>Show Debug Messages</h2>
# <p><strong><code>$DEBUG</code></strong> (Default: unset).</p>
# <p><strong><code>Debug messages are not shown if unset.</code></strong></p>
# <p>Activate with either of:</p>
# <ul>
# <li><code>DEBUG=1</code></li>
# <li><code>--debug</code></li>
# </ul>
# </html>
export DEBUG

# <html><h2>Function one line Description</h2>
# <p><strong><code>$DESC</code></strong> contains the function description, for scripts is automatically extracted.</p>
# <p>Use <strong>$DESC</strong> to call `parse` from a function so it is shown when --desc argument is used.</p>
# <h3>Examples</h3>
# <dl>
# <dt>From a function:</dt>
# <dd>
# <pre><code class="language-bash">DESC='description'
# [ &quot${PARSED-}&quot ] || PARSE='function' parse &quot${@:-}&quot
# </code></pre>
# </dd>
# </dl>
# </html>
DESC=''

# <html><h2>Dry Run</h2>
# <p><strong><code>$DRYRUN</code></strong> (Default: unset).</p>
# <p>Activate with either of:</p>
# <ul>
# <li><code>DRYRUN=1</code></li>
# <li><code>--dryrun</code></li>
# </ul>
# </html>
export DRYRUN

# <html><h2>Function Name or Full Script Path to Parse Arguments</h2>
# <p><strong><code>$PARSE</code></strong> contains the function name or script path ($0).</p>
# <p>Use <strong>$PARSE</strong> to call `parse` from a function or script in posix.</p>
# <p>If not set and BASH_VERSION, the following are used: </p>
# <ul>
# <li><code>FUNCNAME[1]: if BASH_SOURCE[1] =~ *.lib</code></li>
# <li><code>BASH_SOURCE[1]: if BASH_SOURCE[1] != *.lib</code></li>
# </ul>
# <h3>Examples</h3>
# <dl>
# <dt>From a function:</dt>
# <dd>
# <pre><code class="language-bash">DESC='description'
# [ &quot${PARSED-}&quot ] || PARSE='function' parse &quot${@:-}&quot
# </code></pre>
# </dd>
# </dl>
# <dl>
# <dt>From a script:</dt>
# <dd>
# <pre><code class="language-bash">[ &quot${PARSED-}&quot ] || PARSE=&quot${0}&quot parse &quot${@:-}&quot
# </code></pre>
# </dd>
# </dl>
# </html>
PARSE=''

# <html><h2>Arguments Parsed</h2>
# <p><strong><code>$PARSED</code></strong> will be set when arguments have been parsed to avoid recursion.</p>
# <p>Check if <strong>$PARSE</strong> is set before calling `parse` from a function or script.</p>
# <h3>Examples</h3>
# <dl>
# <dt>From a posix function:</dt>
# <dd>
# <pre><code class="language-bash">DESC='description'
# [ &quot${PARSED-}&quot ] || PARSE='function' parse &quot${@:-}&quot
# </code></pre>
# </dd>
# </dl>
# <dl>
# <dt>From a posix script:</dt>
# <dd>
# <pre><code class="language-bash">[ &quot${PARSED-}&quot ] || PARSE=&quot${0}&quot parse &quot${@:-}&quot
# </code></pre>
# </dd>
# </dl>
# </html>
PARSED=''

# <html><h2>Silent Output</h2>
# <p><strong><code>$QUIET</code></strong> (Default: unset).</p>
# <p><strong><code>The following messages are shown if unset:</code></strong></p>
# <ul>
# <li><code>error</code></li>
# <li><code>ok</code></li>
# </ul>
# <p><strong><code>If unset, other messages are shown base on the variable value:</code></strong></p>
# <ul>
# <li><code>debug</code>: $DEBUG</li>
# <li><code>verbose</code>: $VERBOSE</li>
# <li><code>warning</code>: $WARNING</li>
# </ul>
# <p>Activate with either of:</p>
# <ul>
# <li><code>QUIET=1</code></li>
# <li><code>--quiet</code></li>
# </ul>
# <p><strong><code>Note:</code></strong></p>
# <p>Takes precedence over $DEBUG, $VERBOSE and $WARNING.</p>
# </html>
export QUIET

# <html><h2>Show Verbose Messages</h2>
# <p><strong><code>$VERBOSE</code></strong>  (Default: unset).</p>
# <p><strong><code>Verbose messages are not shown if unset.</code></strong></p>
# <p>Activate with either of:</p>
# <ul>
# <li><code>VERBOSE=1</code></li>
# <li><code>--verbose</code></li>
# </ul>
# </html>
export VERBOSE

# <html><h2>Show Warning Messages</h2>
# <p><strong><code>$WARNING</code></strong>  (Default: unset).</p>
# <p><strong><code>Warning messages are not shown if unset</code></strong></p>
# <p>Activate with either of:</p>
# <ul>
# <li><code>WARNING=1</code></li>
# <li><code>--warning</code></li>
# </ul>
# </html>
export WARNING

####################################### ✓|x die: QUIET (default: unset)
# Show message (ok or error) with symbol (✓, x respectively) based on status code, unless QUIET is set and exit
# Globals:
#   Green              Green color for ✓ symbol.
#   PARSE              Function name or file.
#                      Default if BASH_VERSION: FUNCNAME[1] if BASH_SOURCE[1] is *.lib, otherwise BASH_SOURCE[1].
#   PARSED             Function called has been parsed already, run the function.
#   QUIET              Do not show message if set (default: unset).
#   Red                Red color for error message and x symbol.
#   Reset              Reset color.
# Arguments:
#   message            Message to show.
# Output:
#   Message to stderr if error and stdout for ok.
# Returns:
#   1-255 for error, 0 for ok.
#######################################
die() {
  rc=$?
  DESC="Show message (ok or error) with symbol (✓, x respectively) based on status code, unless QUIET is set and exit"
  [ "${PARSED-}" ] || PARSE='die' parse "${@:-}"
  if [ ! "${QUIET-}" ]; then
    case "${rc}" in
      0) ok "${@:-}" ;;
      *) error "${@:-}" ;;
    esac
  fi
  exit "${rc}"
  unset DESC
}

####################################### parse
# Parse common long optional arguments.
# Globals:
#   PARSE              Function name or file.
#                      Default if BASH_VERSION: FUNCNAME[1] if BASH_SOURCE[1] is *.lib, otherwise BASH_SOURCE[1].
#   PARSED             Function called has been parsed already, run the function.
#   QUIET              Do not show message if set (default: unset).
#   VERSION            Version to show and exit.
#   Red                Red color for error message and x symbol.
#   Reset              Reset color.
# Arguments:
#   message            Message to show.
# Output:
#   Message to stderr if error and stdout for ok.
# Returns:
#   1-255 for error, 0 for ok.
#######################################
# shellcheck disable=SC3028,SC3054
parse() {
  unset BASH_ENV ENV
  if [ "${BASH_VERSION-}" ] && [ ! "${PARSE-}" ]; then
    if echo "${BASH_SOURCE[1]}" | grep -q '.lib$' ; then
      PARSE="${FUNCNAME[1]}"
    else
      PARSE="$(basename "${BASH_SOURCE[1]}")"
    fi
  fi
  PARSED='parsed=1'
  for arg do
    shift
    case "${arg}" in
      -h|--help) man -P cat "${PARSE}" 2>/dev/null; exit ;;
      --debug|--dryrun|--quiet|--verbose|--warning) PARSED="${PARSED} $(echo "${arg}" | tr '[:lower:]' '[:upper:]')=1";;
      --desc)
        if [ ! "${DESC-}" ]; then
          echo "${PARSE}" | grep -qE '^/' || { PARSE="$(command -pv "${PARSE}")" || exit; }
          DESC="$(awk '/^#/ && ! /^#!/ && ! /^##/ && ! /^#$/ && ! /^# shellcheck/ {sub(/^# /, ""); print $0=$0 }' \
            "${PARSE}" | head -1)"
        fi
        [ "${DESC-}" ] || exit
        echo "${DESC}" ; exit
        ;;
      --version) echo "${VERSION}" 2>/dev/null; exit ;;
    esac
    set -- "$@" "${arg}"
  done; unset arg

  eval "${PARSED}" "${PARSE}" "\${@:-}"
}

if [ "${0##*/}" = 'sh' ] && (return 0 2>/dev/null); then
  . ../../bin/color.lib
else
  set -eu; PATH="$(dirname "${0}"):${PATH}" && . strict.lib
  [ "${PARSED-}" ] || PARSE="${0}" parse "${@:-}"
fi
