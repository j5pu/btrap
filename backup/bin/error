#!/usr/bin/env bash

# Show error message with x symbol in red, unless QUIET is set
#
#set -eu; PATH="$(dirname "${0}"):${PATH}" && . color.lib
PATH="$(dirname "${0}"):${PATH}"

####################################### x error: QUIET (default: unset)
# Show error message with x symbol in red, unless QUIET is set
# Globals:
#   QUIET              Do not show message if set (default: unset).
#   Red                Red color for error message and x symbol.
#   Reset              Reset color.
# Arguments:
#   Message            Message to show in red with x symbol.
# Output:
#   Message to stderr.
#######################################
main() {
  for arg do
    case "${arg}" in
      -h|--help) usage "${0}" ;;
      --desc) desc "${0}" ;;
      --version) rc.d.version ;;
    esac
  done


  if [ ! "${QUIET-}" ]; then
    if command -v caller >/dev/null; then
      while caller $((n++)); do
       :
      done
      echo $$
      ps -p$$ -o comm= -o args=
      ps -p$PPID -o comm= -o args=
      add=""
      echo si
      caller
      echo $?
      i=0
  #    echo "${BASH_SOURCE[1]}"
  #    echo "${BASH_LINENO[i]}"
  #    echo "${FUNCNAME[i]}"
      caller 0 || echo $?
      echo
      caller 1 || echo $?
      echo
      c="$(caller 0)"
      echo $?
      echo si
      if [ "$(echo "${c}" | awk '{ print $2 }')" = 'die' ]; then c="$(caller 1)"; fi
      add="${RedBg}$(basename "$(echo "${c}" | awk '{ print $3 }')")[$(echo "${c}" | awk '{ print $1 }')]${Reset}: "
    fi

    [ "${*-}" ] || { [ ! "${add-}" ] || add="${add%??}"; }  # if no args, remove trailing ": "
    printf '%b\n' "${RedBold}x${Reset} ${add:-}${RedBold}${*:-}${Reset}" >&2
    unset add c
  fi
}

main "${@}"

