# shellcheck shell=sh

####################################### _color_main
# Show colors and functions examples when not sourced
# ######################################
# shellcheck disable=SC3053,SC3057,SC3040
_color_main() {
  set -eu; PATH="$(dirname "${0}"):${PATH}" && . strict.lib
  for arg do
    case "${arg}" in
      -h|--help) usage "${0}" ;;
      --desc) desc "${0}" ;;
      --test) _color_test ;;
      --version) rc.d.version ;;
    esac
  done
  _color_show
}

####################################### _color_show
# Show colors and helper functions output
# ######################################
_color_show(){
  if [ "${BASH_VERSION-}" ]; then
    prev_two=''
    for i in ${_colors}; do
      first_two="$(echo "${i}" | awk '{print substr($0,0,2)}')"
      [ "${first_two}" = "${prev_two}" ] || { echo; prev_two="${first_two}"; }
      printf "%b\n" "$(eval echo \$"${i}")${i}${Reset}"
    done
  fi

  echo

  export VAR1=1 VAR2=2
  debug Debug Message: not shown "DEBUG unset"
  DEBUG=1 debug VAR1
  DEBUG=1 debug VAR1 VAR2
  DEBUG=1 debug
  DEBUG=1
  QUIET=1 debug Not Shown: "QUIET=1"

  echo

  error Error Message
  error
  QUIET=1 error Not Shown: "QUIET=1"

  echo

  ok Ok Message
  ok
  QUIET=1 ok Not Shown: "QUIET=1"

  echo

  VERBOSE=1 verbose Verbose Message: "VERBOSE=1"
  VERBOSE=1 verbose
  VERBOSE=1
  QUIET=1 verbose Not Shown: "QUIET=1"

  echo

  WARNING=1 warning Warning Message: "WARNING=1"
  WARNING=1 warning
  WARNING=1
  QUIET=1 warning Not shown: "QUIET=1"

  echo

  die Die Message

}

####################################### _color_test
# Test colors and helper functions output
# ######################################
_color_test() {
  rm -f "${_user_data_home_rc_d_file}"
  output="$(. "${0}" 2>&1)"
  # > Colors: Cached
  echo "${output}" | grep -q "Colors: Cached"
  # > Colors: Sourced
  echo "${output}" | grep -q "Colors: Sourced"

  [ -r "${_user_data_home_rc_d_file}" ]

  unset Red
  output="$(. "${0}" 2>&1)"
  # No: > Colors: Cached
  echo "${output}" | grep -q "Colors: Cached" && false
  # > Colors: Sourced
  echo "${output}" | grep -q "Colors: Sourced" && false

  output="$(. "${0}" 2>&1)"
  # No: > Colors: Cached
  echo "${output}" | grep -q "Colors: Cached" && false
  # No: > Colors: Sourced
  echo "${output}" | grep -q "Colors: Sourced" && false

  output="$("${0}" 2>&1)"

  # + color.lib[80]: VAR1=1, VAR2=2
  echo "${output}" | grep -qE '\+.*color.lib\[.*].*: .*VAR1=1,.*$'
  # + color.lib[81]: VAR1=1
  echo "${output}" | grep -E '\+.*color.lib\[.*].*: .*VAR1=1.*$' | grep -qv ','
  # + color.lib[82]
  echo "${output}" | grep -E '\+.*color.lib\[.*].*$' | grep -qv ':'

  # x color.lib[88]: Error Message
  echo "${output}" | grep -qE 'x.*color.lib\[.*].*: .*Error Message.*$'
  # x color.lib[89]
  echo "${output}" | grep -E 'x.*color.lib\[.*].*$' | grep -qv ':'

  # ✓ Ok Message
  echo "${output}" | grep -qE '✓*Ok Message.*$'
  # ✓
  echo "${output}" | grep -E '✓*$' | grep -qv ' '

  # > Verbose Message: VERBOSE=1
  echo "${output}" | grep -qE '>*Verbose Message: VERBOSE=1.*$'
  # >
  echo "${output}" | grep -E '>*$' | grep -qv ' '


  # ! color.lib[107]: Warning Message: WARNING=1
  echo "${output}" | grep -qE '!.*color.lib\[.*].*: .*Warning Message: WARNING=1.*$'
  # ! color.lib[108]
  echo "${output}" | grep -E '!.*color.lib\[.*].*$' | grep -qv ':'

  # ✓ Die Message
  echo "${output}" | grep -qE '✓*Die Message.*$'

  set +e; echo "${output}" | grep -q 'Not Shown' && false
}

####################################### _colors_set
# Set Colors
# https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html
# Contain the unicode Ansi escapes (\u001b) to be used in any language, e.g. Java, Python and Javascript).
# Globals:
#   _colors                All color names.
#   <Name>                 Color foreground.
#   <Name>Bg               Color background.
#   <Name>Bold             Color bold/bright.
#   <Name>Dim              Color dimmed.
#   <Name>Under            Color underscored.
#   Reset                  Reset color.
# ######################################
_colors_set() {
  if [ ! -r "${_user_data_home_rc_d_file}" ]; then
    [ -d "${_user_data_home_rc_d}" ] || mkdir "${_user_data_home_rc_d}"
    _color_index=0; _color_sep=''; _colors=""
    _color_set 'Reset' "${_color_index}" 'm'
    _color_sep=' '
    for _color_name in Black Red Green Yellow Blue Magenta Cyan Grey; do
      _color_set "${_color_name}" "3${_color_index}" 'm'
      _color_set "${_color_name}Bold" "3${_color_index}" ';1m'
      _color_set "${_color_name}Dim" "3${_color_index}" ';2m'
      _color_set "${_color_name}Under" "3${_color_index}" ';4m'
      _color_set "${_color_name}Invert" "3${_color_index}" ';7m'
      _color_set "${_color_name}Bg" "4${_color_index}" 'm'
      export _color_index="$((_color_index+1))"
    done
    echo "_colors='${_colors}'" >> "${_user_data_home_rc_d_file}"
    unset -f _color_set
    unset _color_name _color_index _color_sep
    verbose Colors: Cached
  fi
  . "${_user_data_home_rc_d_file}"
}

_colors_set
$_rc_d_lib_sourced || _color_main "${@}"
verbose Colors: Sourced

unset  _colors
unset _user_data_home_rc_d _user_data_home_rc_d_file _rc_d_lib_sourced
unset -f _color_main _color_show _color_test _colors_set

cat >/tmp/z <<EOF
. /Users/jose/sudoers/bin/color.lib
warning Warning: 1
warning Warning: 2
VAR1=1
debug VAR1
VAR2=2
debug VAR1 VAR2
debug
echo "\${Red}"
EOF
chmod +x /tmp/z

# VERBOSE=1 . /Users/jose/sudoers/bin/color.lib
# VERBOSE=1 /tmp/z
# WARNING=1 /tmp/z
# DEBUG=1 /tmp/z
